<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

  <Type Name="hyperion::utilities::ValueStorage&lt;*&gt;">
    <DisplayString>{($T1 *)data_buffer}</DisplayString>
    <Expand>
      <ExpandedItem>($T1 *)data_buffer</ExpandedItem>
    </Expand>
  </Type>


  <Type Name="hyperion::containers::Array&lt;*,*&gt;">
    <DisplayString>{{ Size={m_size - m_start_offset} Dynamic={m_allocation.is_dynamic} }}</DisplayString>

    <Expand>
      <Item Name="[Size]">(m_size - m_start_offset)</Item>
      <Item Name="[Capacity]" Condition="m_allocation.allocation_type == 1">m_allocation.capacity</Item>
      <Item Name="[Capacity]" Condition="m_allocation.allocation_type == 2 &amp;&amp; m_allocation.is_dynamic == false">m_allocation.capacity</Item>
      <Item Name="[Capacity]" Condition="m_allocation.allocation_type == 2 &amp;&amp; m_allocation.is_dynamic == true">m_allocation.dynamic_allocation.capacity</Item>
      <Item Name="[Dynamic]">(m_allocation.allocation_type == 2 &amp;&amp; m_allocation.is_dynamic)</Item>
      <Item Name="[StartOffset]">(m_start_offset)</Item>

      <ArrayItems Condition="m_allocation.allocation_type == 1">
        <Size>(m_size - m_start_offset)</Size>
        <ValuePointer>(($T1 *)m_allocation.buffer + m_start_offset)</ValuePointer>
      </ArrayItems>
      <ArrayItems Condition="m_allocation.allocation_type == 2 &amp;&amp; m_allocation.is_dynamic == true">
        <Size>(m_size - m_start_offset)</Size>
        <ValuePointer>(($T1 *)m_allocation.dynamic_allocation.buffer + m_start_offset)</ValuePointer>
      </ArrayItems>
      <ArrayItems Condition="m_allocation.allocation_type == 2 &amp;&amp; m_allocation.is_dynamic == false">
        <Size>(m_size - m_start_offset)</Size>
        <ValuePointer>((($T1 *)&amp;m_allocation.storage.data[0]) + m_start_offset)</ValuePointer>
      </ArrayItems>

    </Expand>
  </Type>

  <Type Name="hyperion::containers::detail::String&lt;*&gt;">
    <!-- FIXME - new allocators has broken this -->
    <DisplayString Condition="m_allocation.allocation_type == 1 || m_allocation.is_dynamic == true &amp;&amp; $T1 == 2">{{ {((CharType *)m_allocation.buffer + m_start_offset), s8} }}</DisplayString>
    <DisplayString Condition="m_allocation.allocation_type == 2 &amp;&amp; m_allocation.is_dynamic == false &amp;&amp; $T1 == 2">{{ {(((CharType *)&amp;m_allocation.storage.data[0]) + m_start_offset), s8} }}</DisplayString>
    <DisplayString Condition="m_allocation.allocation_type == 1 || m_allocation.is_dynamic == true &amp;&amp; $T1 == 1 &amp;&amp; is_ansi">{{ {((CharType *)m_allocation.buffer + m_start_offset), s} }}</DisplayString>
    <DisplayString Condition="m_allocation.allocation_type == 2 &amp;&amp; m_allocation.is_dynamic == false &amp;&amp; $T1 == 1 &amp;&amp; is_ansi">{{ {(((CharType *)&amp;m_allocation.storage.data[0]) + m_start_offset), s} }}</DisplayString>
    <DisplayString Condition="m_allocation.allocation_type == 1 || m_allocation.is_dynamic == true &amp;&amp; $T1 == 3 &amp;&amp; is_utf16">{{ {((CharType *)m_allocation.buffer + m_start_offset), su} }}</DisplayString>
    <DisplayString Condition="m_allocation.allocation_type == 2 &amp;&amp; m_allocation.is_dynamic == false &amp;&amp; $T1 == 3 &amp;&amp; is_utf16">{{ {(((CharType *)&amp;m_allocation.storage.data[0]) + m_start_offset), su} }}</DisplayString>
    <DisplayString Condition="m_allocation.allocation_type == 1 || m_allocation.is_dynamic == true &amp;&amp; $T1 == 4 &amp;&amp; is_utf32">{{ {((CharType *)m_allocation.buffer + m_start_offset), s32} }}</DisplayString>
    <DisplayString Condition="m_allocation.allocation_type == 2 &amp;&amp; m_allocation.is_dynamic == false &amp;&amp; $T1 == 4 &amp;&amp; is_utf32">{{ {(((CharType *)&amp;m_allocation.storage.data[0]) + m_start_offset), s32} }}</DisplayString>
    <DisplayString Condition="m_allocation.allocation_type == 1 || m_allocation.is_dynamic == true &amp;&amp; $T1 == 5 &amp;&amp; is_wide">{{ {((CharType *)m_allocation.buffer + m_start_offset), su} }}</DisplayString>
    <DisplayString Condition="m_allocation.allocation_type == 2 &amp;&amp; m_allocation.is_dynamic == false &amp;&amp; $T1 == 5 &amp;&amp; is_wide">{{ {(((CharType *)&amp;m_allocation.storage.data[0]) + m_start_offset), su} }}</DisplayString>

    <Expand>
      <Item Name="[Text]" Condition="m_allocation.allocation_type == 1 || m_allocation.is_dynamic == true &amp;&amp; is_utf8">((CharType *)m_allocation.buffer + m_start_offset + m_start_offset), s8</Item>
      <Item Name="[Text]" Condition="m_allocation.allocation_type == 2 &amp;&amp; m_allocation.is_dynamic == false &amp;&amp; is_utf8">(((CharType *)&amp;m_allocation.storage.data[0]) + m_start_offset), s8</Item>
      <Item Name="[Text]" Condition="m_allocation.allocation_type == 1 || m_allocation.is_dynamic == true &amp;&amp; is_ansi">((CharType *)m_allocation.buffer + m_start_offset + m_start_offset), s</Item>
      <Item Name="[Text]" Condition="m_allocation.allocation_type == 2 &amp;&amp; m_allocation.is_dynamic == false &amp;&amp; is_ansi">(((CharType *)&amp;m_allocation.storage.data[0]) + m_start_offset), s</Item>
      <Item Name="[Text]" Condition="m_allocation.allocation_type == 1 || m_allocation.is_dynamic == true &amp;&amp; is_utf16">((CharType *)m_allocation.buffer + m_start_offset + m_start_offset), su</Item>
      <Item Name="[Text]" Condition="m_allocation.allocation_type == 2 &amp;&amp; m_allocation.is_dynamic == false &amp;&amp; is_utf16">(((CharType *)&amp;m_allocation.storage.data[0]) + m_start_offset), su</Item>
      <Item Name="[Text]" Condition="m_allocation.allocation_type == 1 || m_allocation.is_dynamic == true &amp;&amp; is_utf32">((CharType *)m_allocation.buffer + m_start_offset + m_start_offset), s32</Item>
      <Item Name="[Text]" Condition="m_allocation.allocation_type == 2 &amp;&amp; m_allocation.is_dynamic == false &amp;&amp; is_utf32">(((CharType *)&amp;m_allocation.storage.data[0]) + m_start_offset), s32</Item>
      <Item Name="[Text]" Condition="m_allocation.allocation_type == 1 || m_allocation.is_dynamic == true &amp;&amp; is_wide">((CharType *)m_allocation.buffer + m_start_offset + m_start_offset), su</Item>
      <Item Name="[Text]" Condition="m_allocation.allocation_type == 2 &amp;&amp; m_allocation.is_dynamic == false &amp;&amp; is_wide">(((CharType *)&amp;m_allocation.storage.data[0]) + m_start_offset), su</Item>

      <Item Name="[Type]">string_type</Item>

      <Item Name="[Size]">(m_size - m_start_offset - 1)</Item>
      <Item Name="[Capacity]" Condition="m_allocation.allocation_type == 1">m_allocation.capacity</Item>
      <Item Name="[Capacity]" Condition="m_allocation.allocation_type == 2 &amp;&amp; m_allocation.is_dynamic == false">m_allocation.capacity</Item>
      <Item Name="[Capacity]" Condition="m_allocation.allocation_type == 2 &amp;&amp; m_allocation.is_dynamic == true">m_allocation.dynamic_allocation.capacity</Item>
      <Item Name="[Length]">(m_length)</Item>
      <Item Name="[Dynamic]">(m_allocation.allocation_type == 2 &amp;&amp; m_allocation.is_dynamic)</Item>
      <Item Name="[StartOffset]">(m_start_offset)</Item>
    </Expand>
  </Type>

  <Type Name="hyperion::containers::HashMap&lt;*,*&gt;">
    <DisplayString>{{ Size={m_size} }}</DisplayString>

    <Expand>
      <CustomListItems>
        <Variable Name="bucket_ptr" InitialValue="((hyperion::containers::detail::HashMapBucket&lt;$T1,$T2&gt; *)nullptr)" />
        <Variable Name="bucket_index" InitialValue="0" />

        <Variable Name="current_head" InitialValue="((hyperion::containers::detail::HashMapElement&lt;$T1,$T2&gt; *)nullptr)" />

        <Exec Condition="m_buckets.m_allocation.allocation_type == 1">bucket_ptr = ((hyperion::containers::detail::HashMapBucket&lt;$T1,$T2&gt; *) m_buckets.m_allocation.buffer)</Exec>
        <Exec Condition="m_buckets.m_allocation.allocation_type == 2 &amp;&amp; m_buckets.m_allocation.is_dynamic == false">bucket_ptr = ((hyperion::containers::detail::HashMapBucket&lt;$T1,$T2&gt; *) &amp;(m_buckets.m_allocation.storage.data[0]))</Exec>
        <Exec Condition="m_buckets.m_allocation.allocation_type == 2 &amp;&amp; m_buckets.m_allocation.is_dynamic == true">bucket_ptr = ((hyperion::containers::detail::HashMapBucket&lt;$T1,$T2&gt; *) m_buckets.m_allocation.dynamic_allocation.buffer)</Exec>

        <Exec Condition="m_buckets.m_allocation.allocation_type == 1">bucket_ptr = ((hyperion::containers::detail::HashMapBucket&lt;$T1,$T2&gt; *)m_buckets.m_allocation.buffer + m_buckets.m_start_offset)</Exec>
        <Exec Condition="m_buckets.m_allocation.allocation_type == 2 &amp;&amp; m_buckets.m_allocation.is_dynamic == false">bucket_ptr = ((hyperion::containers::detail::HashMapBucket&lt;$T1,$T2&gt; *)&amp;m_buckets.m_allocation.storage.data[0] + m_buckets.m_start_offset)</Exec>
        <Exec Condition="m_buckets.m_allocation.allocation_type == 2 &amp;&amp; m_buckets.m_allocation.is_dynamic == true">bucket_ptr = ((hyperion::containers::detail::HashMapBucket&lt;$T1,$T2&gt; *)m_buckets.m_allocation.dynamic_allocation.buffer + m_buckets.m_start_offset)</Exec>

        <Loop>
          <Break Condition="bucket_index == (m_buckets.m_size - m_buckets.m_start_offset)" />

          <Exec>current_head = bucket_ptr-&gt;head</Exec>

          <If Condition="current_head != nullptr">
            <Loop>
              <Break Condition="current_head == nullptr" />
              <Item Name="[{ current_head-&gt;pair.first }]">current_head-&gt;pair.second</Item>
              <Exec>current_head = current_head-&gt;next</Exec>
            </Loop>
          </If>
          <Exec>bucket_ptr++</Exec>
          <Exec>bucket_index++</Exec>
        </Loop>
      </CustomListItems>
    </Expand>
  </Type>

  <Type Name="hyperion::utilities::Span&lt;*&gt;">
    <DisplayString>{{ Address={((void*)first)} Size={(last - first)} }}</DisplayString>
    <Expand>
      <Item Name="[Size]">(last - first)</Item>

      <ArrayItems>
        <Size>(last - first)</Size>
        <ValuePointer>(first)</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="hyperion::memory::UniquePtr&lt;*&gt;">
    <DisplayString>{{ {($T1 *)m_holder.value} }}</DisplayString>
    <Expand>
      <ExpandedItem>($T1 *)m_holder.value</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="hyperion::memory::RefCountedPtr&lt;*,*&gt;">
    <DisplayString>{{ {($T1 *)m_ref.m_ptr->value} }}</DisplayString>
    <Expand>
      <Item Name="[Strong Count]">(m_ref.m_ptr->strong_count)</Item>
      <Item Name="[Weak Count]">(m_ref.m_ptr->weak_count)</Item>
      <ExpandedItem>($T1 *)m_ref.m_ptr->value</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="hyperion::utilities::detail::VariantBase&lt;*,*&gt;">
    <DisplayString>{{ Index={m_current_index} }}</DisplayString>
    <Expand>
      <Item Name="[Data]">m_storage.data_buffer</Item>
    </Expand>
  </Type>

  <Type Name="hyperion::threading::ThreadID">
    <DisplayString>{m_name}</DisplayString>
    <Expand>
      <Item Name="[Name]">m_name</Item>
      <Item Name="[ID]">m_value &amp; g_thread_id_mask</Item>
      <Item Name="[Category]">(hyperion::threading::ThreadCategory)(m_value &amp; g_thread_category_mask)</Item>
      <Item Name="[IsDynamic]">(bool)(m_value &amp; g_thread_dynamic_mask)</Item>
    </Expand>
  </Type>

  <Type Name="hyperion::threading::AtomicVar&lt;*&gt;">
    <DisplayString>{{ Value={m_value} }}</DisplayString>
    <Expand>
      <Item Name="[Value]">m_value</Item>
    </Expand>
  </Type>

  <Type Name="hyperion::threading::Semaphore&lt;*,hyperion::threading::detail::ConditionVarSemaphoreImpl&lt;*&gt;&gt;">
    <DisplayString Condition="m_impl.value&lt;=0">Signaled</DisplayString>
    <DisplayString Condition="m_impl.value&gt;0">Not Signaled</DisplayString>
    <Expand>
      <Item Name="[Value]">m_impl.value</Item>
    </Expand>
  </Type>

  <Type Name="hyperion::ID&lt;*&gt;">
    <DisplayString>{{ Value={value} }}</DisplayString>
  </Type>

  <Type Name="hyperion::Handle&lt;*&gt;">
    <Expand>
      <CustomListItems>
        <Variable Name="pool" InitialValue="&amp;(((hyperion::ObjectContainer&lt;$T1&gt; *)ptr-&gt;container)-&gt;m_pool)" />
        <Variable Name="block_index" InitialValue="0" />
        <Variable Name="current_head" InitialValue="(((hyperion::ObjectContainer&lt;$T1&gt; *)ptr-&gt;container)-&gt;m_pool).m_blocks.m_head" />

        <Loop>
          <Break Condition="current_head == nullptr || block_index &gt; (ptr-&gt;index / pool-&gt;num_elements_per_block)" />

          <If Condition="current_head != nullptr &amp;&amp; block_index == (ptr-&gt;index / pool-&gt;num_elements_per_block)">
            <Item Name="[Value]">($T1 *)(&amp;((hyperion::memory::MemoryPoolBlock&lt;hyperion::HypObjectMemory&lt;$T1&gt;,hyperion::memory::MemoryPoolInitInfo,&amp;hyperion::ObjectContainer_OnBlockAllocated&lt;$T1&gt; &gt; *)&amp;current_head-&gt;value.data_buffer[0])-&gt;elements.m_values[ptr-&gt;index % pool-&gt;num_elements_per_block].bytes[0])</Item>
          </If>
          
          <Exec>current_head = current_head-&gt;next</Exec>
          
          <Exec>block_index++</Exec>
        </Loop>
      </CustomListItems>
    </Expand>
  </Type>

  <Type Name="hyperion::WeakHandle&lt;*&gt;">
    <Expand>
      <CustomListItems>
        <Variable Name="pool" InitialValue="&amp;(((hyperion::ObjectContainer&lt;$T1&gt; *)ptr-&gt;container)-&gt;m_pool)" />
        <Variable Name="block_index" InitialValue="0" />
        <Variable Name="current_head" InitialValue="(((hyperion::ObjectContainer&lt;$T1&gt; *)ptr-&gt;container)-&gt;m_pool).m_blocks.m_head" />

        <Loop>
          <Break Condition="current_head == nullptr || block_index &gt; (ptr-&gt;index / pool-&gt;num_elements_per_block)" />

          <If Condition="current_head != nullptr &amp;&amp; block_index == (ptr-&gt;index / pool-&gt;num_elements_per_block)">
            <Item Name="[Value]">($T1 *)(&amp;((hyperion::memory::MemoryPoolBlock&lt;hyperion::HypObjectMemory&lt;$T1&gt;,hyperion::memory::MemoryPoolInitInfo,&amp;hyperion::ObjectContainer_OnBlockAllocated&lt;$T1&gt; &gt; *)&amp;current_head-&gt;value.data_buffer[0])-&gt;elements.m_values[ptr-&gt;index % pool-&gt;num_elements_per_block].bytes[0])</Item>
          </If>

          <Exec>current_head = current_head-&gt;next</Exec>

          <Exec>block_index++</Exec>
        </Loop>
      </CustomListItems>
    </Expand>
  </Type>

  <!-- Walks the whole hash map to display the name as a string! -->
  <Type Name="hyperion::Name">
    <Expand>
      <CustomListItems>
        <Variable Name="bucket_ptr" InitialValue="((hyperion::containers::detail::HashMapBucket&lt;unsigned __int64,hyperion::containers::detail::String&lt;1&gt; &gt; *)nullptr)" />
        <Variable Name="bucket_index" InitialValue="0" />

        <Variable Name="current_head" InitialValue="((hyperion::containers::detail::HashMapElement&lt;unsigned __int64,hyperion::containers::detail::String&lt;1&gt; &gt; *)nullptr)" />

        <Variable Name="found" InitialValue="false"/>

        <Variable Name="hc" InitialValue="this-&gt;hash_code"/>

        <Exec Condition="g_name_registry-&gt;m_name_map.m_buckets.m_allocation.allocation_type == 1">bucket_ptr = ((hyperion::containers::detail::HashMapBucket&lt;unsigned __int64,hyperion::containers::detail::String&lt;1&gt; &gt; *) &amp;(g_name_registry-&gt;m_name_map.m_buckets.m_allocation.buffer))</Exec>
        <Exec Condition="g_name_registry-&gt;m_name_map.m_buckets.m_allocation.allocation_type == 2 &amp;&amp; g_name_registry-&gt;m_name_map.m_buckets.m_allocation.is_dynamic == true">bucket_ptr = ((hyperion::containers::detail::HashMapBucket&lt;unsigned __int64,hyperion::containers::detail::String&lt;1&gt; &gt; *) &amp;(g_name_registry-&gt;m_name_map.m_buckets.m_allocation.buffer))</Exec>
        <Exec Condition="g_name_registry-&gt;m_name_map.m_buckets.m_allocation.allocation_type == 2 &amp;&amp; g_name_registry-&gt;m_name_map.m_buckets.m_allocation.is_dynamic == false">bucket_ptr = ((hyperion::containers::detail::HashMapBucket&lt;unsigned __int64,hyperion::containers::detail::String&lt;1&gt; &gt; *) &amp;(g_name_registry-&gt;m_name_map.m_buckets.m_allocation.storage.data[0]))</Exec>

        <Exec Condition="g_name_registry-&gt;m_name_map.m_buckets.m_allocation.allocation_type == 1">bucket_ptr = ((hyperion::containers::detail::HashMapBucket&lt;unsigned __int64,hyperion::containers::detail::String&lt;1&gt; &gt; *)g_name_registry-&gt;m_name_map.m_buckets.m_allocation.buffer + g_name_registry-&gt;m_name_map.m_buckets.m_start_offset)</Exec>
        <Exec Condition="g_name_registry-&gt;m_name_map.m_buckets.m_allocation.allocation_type == 2 &amp;&amp; g_name_registry-&gt;m_name_map.m_buckets.m_allocation.is_dynamic == true">bucket_ptr = ((hyperion::containers::detail::HashMapBucket&lt;unsigned __int64,hyperion::containers::detail::String&lt;1&gt; &gt; *)g_name_registry-&gt;m_name_map.m_buckets.m_allocation.buffer + g_name_registry-&gt;m_name_map.m_buckets.m_start_offset)</Exec>
        <Exec Condition="g_name_registry-&gt;m_name_map.m_buckets.m_allocation.allocation_type == 2 &amp;&amp; g_name_registry-&gt;m_name_map.m_buckets.m_allocation.is_dynamic == false">bucket_ptr = ((hyperion::containers::detail::HashMapBucket&lt;unsigned __int64,hyperion::containers::detail::String&lt;1&gt; &gt; *)&amp;g_name_registry-&gt;m_name_map.m_buckets.m_allocation.storage.data[0] + g_name_registry-&gt;m_name_map.m_buckets.m_start_offset)</Exec>

        <Loop>
          <Break Condition="found == true || bucket_index == (g_name_registry-&gt;m_name_map.m_buckets.m_size - g_name_registry-&gt;m_name_map.m_buckets.m_start_offset)" />

          <Exec>current_head = bucket_ptr-&gt;head</Exec>

          <If Condition="found == false &amp;&amp; current_head != nullptr">
           <Loop>
              <Break Condition="found == true || current_head == nullptr" />
              <If Condition="(unsigned __int64)hash_code == (unsigned __int64)current_head-&gt;pair.first">
                <If Condition="current_head-&gt;pair.second.m_allocation.allocation_type == 2 &amp;&amp; current_head-&gt;pair.second.m_allocation.is_dynamic == false">
                  <Item Name="StringValue">(char*)&amp;(current_head-&gt;pair.second.m_allocation.storage.data + current_head-&gt;pair.second.m_start_offset)[0],sb</Item>
                </If>
                <If Condition="current_head-&gt;pair.second.m_allocation.allocation_type == 1 || current_head-&gt;pair.second.m_allocation.is_dynamic == true">
                  <Item Name="StringValue">&amp;((char*)current_head-&gt;pair.second.m_allocation.buffer + current_head-&gt;pair.second.m_start_offset)[0],sb</Item>
                </If>
                <Exec>found = true</Exec>
              </If>
              <Exec>current_head = current_head-&gt;next</Exec>
            </Loop>
          </If>

          <Exec>bucket_ptr++</Exec>
          <Exec>bucket_index++</Exec>
        </Loop>

        <If Condition="found == false">
          <Item Name="StringValue">"???"</Item>
        </If>
      </CustomListItems>
    </Expand>
  </Type>

  <Type Name="hyperion::renderer::RenderObjectHandle_Strong&lt;*,*&gt;">
    <DisplayString>{{ ID={index} Strong={s_container->m_data.m_values[index - 1].ref_count_strong.m_value} Weak={s_container->m_data.m_values[index - 1].ref_count_weak.m_value} }}</DisplayString>

    <Expand>
      <Item Name="[Strong]">(s_container->m_data.m_values[index - 1].ref_count_strong.m_value)</Item>
      <Item Name="[Weak]">s_container->m_data.m_values[index - 1].ref_count_weak.m_value</Item>
      <!--<Item Name="[Name]">_container->m_debug_names.m_values[index]</Item>-->

      <ExpandedItem>($T1 *)(&amp;(s_container->m_data.m_values[index - 1].storage))</ExpandedItem>
    </Expand>
  </Type>

</AutoVisualizer>