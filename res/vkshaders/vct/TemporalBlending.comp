#version 450

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

#include "../include/vct/uniforms.inc"
#include "../include/shared.inc"

layout(set = HYP_DESCRIPTOR_SET_VOXELIZER, binding = 0, rgba8) uniform image3D voxel_image;
layout(set = HYP_DESCRIPTOR_SET_VOXELIZER, binding = 6, rgba8) uniform image3D temporal_blending_image;
layout(set = HYP_DESCRIPTOR_SET_VOXELIZER, binding = 7) uniform texture3D voxel_texture;
layout(set = HYP_DESCRIPTOR_SET_VOXELIZER, binding = 8) uniform sampler voxel_sampler;

#define HYP_VCT_TEMPORAL_BLENDING_IMAGE_EXTENT 32
#define HYP_VCT_TEMPORAL_BLENDING_SENSITIVITY 50.0

void main(void)
{
    ivec3 coord = ivec3(gl_GlobalInvocationID.xyz);

    if (any(greaterThan(coord, ivec3(HYP_VCT_TEMPORAL_BLENDING_IMAGE_EXTENT - 1)))) {
        return;
    }

    const vec4 current_blend_value = imageLoad(temporal_blending_image, coord);

    vec3 texcoord = vec3(coord) / vec3(HYP_VCT_TEMPORAL_BLENDING_IMAGE_EXTENT - 1);
    ivec3 voxel_image_coord = clamp(ivec3(texcoord * vec3(vct_params.extent.xyz - uvec3(1))), ivec3(0), ivec3(vct_params.extent.xyz) - ivec3(1));

    const vec4 target_value = Texture3D(voxel_sampler, voxel_texture, texcoord);
    const vec3 mixed_value = mix(current_blend_value.rgb, target_value.rgb, 0.5);
    const float blend = 1.0 - clamp(distance(current_blend_value.rgb, target_value.rgb) * HYP_VCT_TEMPORAL_BLENDING_SENSITIVITY, 0.0, 1.0);
    
    imageStore(temporal_blending_image, coord, vec4(target_value.rgb, blend));
}
