#version 450

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_nonuniform_qualifier : require

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

#include "../include/shared.inc"

layout(set = 0, binding = 0) uniform texture3D mip_in;
layout(set = 0, binding = 1, rgba8) uniform writeonly image3D mip_out;
layout(set = 0, binding = 2) uniform sampler voxel_map_sampler;

layout(push_constant) uniform VoxelMipData
{
    uvec4 mip_dimensions;
    uvec4 prev_mip_dimensions;
    uint mip_level;
};

vec4 GetVoxelAtTexel(vec3 texcoord, ivec3 offset)
{
    const vec3 offset_coord = texcoord + (vec3(offset) * (vec3(1.0) / prev_mip_dimensions.xyz));

    return Texture3DLod(voxel_map_sampler, mip_in, offset_coord, 0.0);
}

void main()
{
    const uvec3 coord = gl_GlobalInvocationID.xyz;

    if (any(greaterThanEqual(coord, mip_dimensions.xyz))) {
        return;
    }

    const vec3 texcoord = vec3(coord) / vec3(mip_dimensions.xyz - uvec3(1.0));

    vec4 color = GetVoxelAtTexel(texcoord, ivec3(0));
    vec4 final_color = color;

    // if (mip_level == 0) {
    //    vec4 temporal_blending_value = Texture3D(voxel_map_sampler, temporal_blending, texcoord);
        // final_color.rgb = mix(temporal_blending_value.rgb, color.rgb, temporal_blending_value.a);
     //   final_color.rgb = temporal_blending_value.rgb;
    // }

    imageStore(mip_out, clamp(ivec3(coord), ivec3(0), ivec3(mip_dimensions.xyz) - ivec3(1.0)), final_color);
}
