#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_scalar_block_layout : require

#define HYP_NO_CUBEMAP

#include "../include/defines.inc"
#include "../include/noise.inc"
#include "../include/packing.inc"
#include "../include/tonemap.inc"

layout(set = 0, binding = 0) uniform accelerationStructureEXT tlas;
// radiance image
layout(set = 0, binding = 1, rgba8) uniform image2D image;

layout(set = 0, binding = 5) uniform texture2D gbuffer_normals_texture;
layout(set = 0, binding = 6) uniform texture2D gbuffer_material_texture;
layout(set = 0, binding = 7) uniform texture2D gbuffer_depth_texture;
layout(set = 0, binding = 7) uniform sampler sampler_nearest;
layout(set = 0, binding = 8) uniform sampler sampler_linear;

#define HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS

#include "../include/scene.inc"
#include "../include/shared.inc"
#include "../include/packing.inc"
#include "../include/noise.inc"
#include "../include/brdf.inc"

#undef HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS
#undef HYP_NO_CUBEMAP

layout(std140, set = 1, binding = 0, row_major) readonly buffer SceneShaderData
{
    Scene scene;
};

#include "../include/rt/payload.inc"

const float spatial_offsets[] = { 0.0, 0.5, 0.25, 0.75 };
const float temporal_rotations[] = { 60, 300, 180, 240, 120, 0 };

layout(location = 0) rayPayloadEXT RayPayload payload;
#define MAX_RECURSION 2
#define RAY_OFFSET 3.25
#define NUM_SAMPLES 1
#define NUM_ACCUMULATION_SAMPLES 6

void ComputeOrthonormalBasis(in vec3 normal, out vec3 tangent, out vec3 bitangent)
{
    vec3 T;
    T = cross(normal, vec3(0.0, 1.0, 0.0));
    T = mix(cross(normal, vec3(1.0, 0.0, 0.0)), T, step(HYP_FMATH_EPSILON, dot(T, T)));

    T = normalize(T);

    tangent = T;
    bitangent = normalize(cross(normal, T));
}

const vec2 offsets[5] = vec2[](
    vec2(-1, -1),
    vec2(0, -1),
    vec2(0, 0),
    vec2(1, 0),
    vec2(1, 1)
);

mat3 getNormalSpace(in vec3 normal) {
   vec3 someVec = vec3(1.0, 0.0, 0.0);
   float dd = dot(someVec, normal);
   vec3 tangent = vec3(0.0, 1.0, 0.0);
   if(1.0 - abs(dd) > 1e-6) {
     tangent = normalize(cross(someVec, normal));
   }
   vec3 bitangent = cross(normal, tangent);
   return mat3(tangent, bitangent, normal);
}

vec3 hemisphereSample_uniform(float u, float v) {
    float phi = v * 2.0 * HYP_FMATH_PI;
    float cosTheta = 1.0 - u;
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
    return vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);
 }
vec3 CosineSampleHemisphere(float r1, float r2)
{
  vec3  dir;
  float r   = sqrt(r1);
  float phi = HYP_FMATH_PI * 2.0 * r2;
  dir.x     = r * cos(phi);
  dir.y     = r * sin(phi);
  dir.z     = sqrt(max(0.0, 1.0 - dir.x * dir.x - dir.y * dir.y));

  return dir;
}

vec3 ImportanceSampleGTR2(float rgh, float r1, float r2)
{
    float a = max(0.001, rgh);

    float phi = r1 * HYP_FMATH_PI * 2.0;

    float cosTheta = sqrt((1.0 - r2) / (1.0 + (a * a - 1.0) * r2));
    float sinTheta = clamp(sqrt(1.0 - (cosTheta * cosTheta)), 0.0, 1.0);
    float sinPhi   = sin(phi);
    float cosPhi   = cos(phi);

    return vec3(sinTheta * cosPhi, sinTheta * sinPhi, cosTheta);
}

void main() 
{
    const ivec2 resolution = imageSize(image);
    const ivec2 storage_coord = clamp(ivec2(gl_LaunchIDEXT.xy), ivec2(0), resolution - ivec2(1));
    const vec2 uv = (vec2(storage_coord) + 0.5) / vec2(resolution);

    const mat4 view_inverse = inverse(scene.view);
    const mat4 projection_inverse = inverse(scene.projection);

    const vec3 normal = normalize(DecodeNormal(Texture2DLod(sampler_nearest, gbuffer_normals_texture, uv, 0.0)));
    const float depth = Texture2DLod(sampler_nearest, gbuffer_depth_texture, uv, 0.0).r;
    const vec3 position = ReconstructWorldSpacePositionFromDepth(projection_inverse, view_inverse, uv, depth).xyz;
    const vec4 material_data = Texture2DLod(sampler_nearest, gbuffer_material_texture, uv, 0.0);
    const float perceptual_roughness = sqrt(material_data.r);

    const vec3 V = normalize(scene.camera_position.xyz - position);
    const vec3 R = normalize(reflect(-V, normal));

    const uint flags = gl_RayFlagsOpaqueEXT;
    const uint mask = 0xff;
    const float tmin = 0.001;
    const float tmax = 10000.0;

    uint ray_seed = InitRandomSeed(InitRandomSeed(gl_LaunchIDEXT.x, gl_LaunchIDEXT.y), scene.frame_counter % 6);

#define HIT_CACHE_SIZE MAX_RECURSION
#define FIRST_HIT hits[0]

    RayHit hits[HIT_CACHE_SIZE];

    vec3 color = vec3(0.0);

    vec3 direction = normal;

    vec3 tangent;
    vec3 bitangent;
    ComputeOrthonormalBasis(normal, tangent, bitangent);

    const float r1 = RandomFloat(ray_seed);
    const float r2 = RandomFloat(ray_seed);

    vec3 H = ImportanceSampleGTR2(perceptual_roughness, r1, r2);
    H = tangent * H.x + bitangent * H.y + normal * H.z;

    direction = H;
    // direction = mix(normal, normalize(scattered_direction), perceptual_roughness);// normalize(normal + scattered_direction * perceptual_roughness);
    direction = reflect(-V, direction);
    vec3 origin = position + normal * RAY_OFFSET;
        
    traceRayEXT(tlas, flags, mask, 0, 0, 0, origin, tmin, direction, tmax, 0);
    
    vec3 hit_position = origin + direction * payload.distance;
    
    RayHit hit;
    hit.payload = payload;
    hit.position = hit_position;
    hits[0] = hit;

    if (payload.distance >= tmin && payload.distance < tmax) {
        color += hit.payload.color;
    }

    color.rgb = pow(color.rgb, vec3(1.0 / 2.2));

    imageStore(image, storage_coord, vec4(color, 1.0));
}
