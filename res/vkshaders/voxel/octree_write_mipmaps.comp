#version 450
#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

#include "../include/defines.inc"

layout(std430, set = 0, binding = 1) readonly buffer uuFragmentList { uvec2 uFragmentList[]; };
layout(std430, set = 0, binding = 2) buffer uuOctree { uvec2 uOctree[]; };

layout(push_constant) uniform uuPushConstant { uint uFragmentNum, uVoxelResolution, mipmap_level; };

#include "../include/voxel/shared.inc"
#include "../include/voxel/atomics.inc"

void main()
{
    if (gl_GlobalInvocationID.x >= uFragmentNum) {
		return;
	}
	
	uvec2 fragmentData = uFragmentList[gl_GlobalInvocationID.x];
	uvec3 fragPos = uvec3(fragmentData.x & 0xfffu, (fragmentData.x >> 12u) & 0xfffu, (fragmentData.x >> 24u) | ((fragmentData.y >> 28u) << 8u));

	uint resolution = uVoxelResolution;
	uint targetResolution = 1 << mipmap_level;
	uint idx = 0, cur = 0; 
	uvec3 cmp;
	do {
		resolution >>= 1;
		cmp = uvec3(greaterThanEqual(fragPos, uvec3(resolution)));
		idx = cur + (uint(cmp.x) | (uint(cmp.y) << 1u) | (uint(cmp.z) << 2u));
		cur = uOctree[idx].x & 0x7fffffffu;
		fragPos -= cmp * resolution;
	} while (cur != 0u && resolution > mipmap_level); // TODO(snowapril) : why 1 << targetLevel not work

	if (resolution == mipmap_level) {
		uint childIndex = uOctree[idx].x & 0x7fffffffu;
 		vec4 childValueSum = vec4(0.0);
        
		for (uint j = 0; j < 8; ++j) {
			childValueSum += RGBA8ToVec4Raw(uOctree[childIndex + j].y);
		}
       
        childValueSum /= 8.0;
		
		atomicExchange(uOctree[idx].y, Vec4ToRGBA8Raw(childValueSum));
	}
}
