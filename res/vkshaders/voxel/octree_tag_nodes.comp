#version 450
#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

#include "../include/defines.inc"

layout(std430, set = 0, binding = 2) buffer uuOctree { uvec2 uOctree[]; };
layout(std430, set = 0, binding = 1) readonly buffer uuFragmentList { uvec2 uFragmentList[]; };

layout(push_constant) uniform uuPushConstant { uint uFragmentNum, uVoxelResolution; };

#include "../include/voxel/shared.inc"

void main() {
    if (gl_GlobalInvocationID.x >= uFragmentNum) {
        return;
    }

    uvec2 ufragment = uFragmentList[gl_GlobalInvocationID.x];

    uint level_dim = uVoxelResolution;
    uvec3 level_pos = uvec3(ufragment.x & 0xfffu, (ufragment.x >> 12u) & 0xfffu, (ufragment.x >> 24u) | ((ufragment.y >> 28u) << 8u));
    bvec3 level_cmp;

    uint idx = 0u, cur = 0u;

    do {
        level_dim >>= 1;

        level_cmp = greaterThanEqual(level_pos, uvec3(level_dim));
        idx = cur + (uint(level_cmp.x) | (uint(level_cmp.y) << 1u) | (uint(level_cmp.z) << 2u));
        cur = uOctree[idx].x & 0x7fffffffu;
        level_pos -= uvec3(level_cmp) * level_dim;
    } while (cur != 0u && level_dim > 1u);

    uOctree[idx].x |= 0x80000000u;
    
    if (level_dim == 1u) { // leaf node
        // uOctree[idx] = 0xC0000000u | (ufragment.y & 0xffffffu); //termination
        // tag and color data

        // atomic moving average
        uint prev_val = 0, cur_val, new_val = ufragment.y & 0x00ffffffu;
        vec4 rgba = RGBA8ToVec4Raw(new_val);
        
        atomicExchange(uOctree[idx].y, new_val);
        
        /*while ((cur_val = atomicCompSwap(uOctree[idx].y, prev_val, new_val)) != prev_val) {
            prev_val = cur_val;
            vec4 prev_rgba = RGBA8ToVec4Raw(prev_val);
            //prev_rgba.xyz *= prev_rgba.w;
            vec4 cur_rgba = prev_rgba + rgba;
            cur_rgba.xyz /= 2;//cur_rgba.w;
            new_val = Vec4ToRGBA8Raw(cur_rgba);
        }*/
    }
}
