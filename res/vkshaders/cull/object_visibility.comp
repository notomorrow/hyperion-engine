#version 450

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_nonuniform_qualifier : require

layout(local_size_x = 256) in;

#include "../include/defines.inc"
#include "../include/shared.inc"
#include "../include/aabb.inc"
#include "./shared.inc"

#define HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS
#include "../include/object.inc"
#include "../include/scene.inc"
#undef HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS

layout(std140, set = 0, binding = 1, row_major) readonly buffer SceneBuffer
{
    Scene scene;
};

struct IndirectDrawCommand
{
    // VkDrawIndexedIndirectCommand
    uint index_count;
    uint instance_count;
    uint first_index;
    int vertex_offset;
    uint first_instance;
};

struct ObjectInstance
{
    uint entity_id;
    uint draw_command_index;
    uint batch_index;
    uint num_indices;
    vec4 aabb_max;
    vec4 aabb_min;

    uint packed_data;
    uint _pad0, _pad1, _pad2;
};

layout(std140, set = 0, binding = 3, row_major) readonly buffer InstancesBuffer
{
    ObjectInstance instances[];
};

layout(set = 0, binding = 4) buffer IndirectDrawCommandsBuffer
{
    IndirectDrawCommand indirect_draw_commands[];
};

layout(set = 0, binding = 5) uniform texture2D depth_pyramid;
layout(set = 0, binding = 6) uniform sampler depth_pyramid_sampler;

layout(push_constant) uniform ObjectVisibilityData
{
    uint batch_offset;
    uint num_drawables;
    uint scene_id;
    uvec2 depth_pyramid_dimensions;
} push_constants;

uint GetObjectBucket(ObjectInstance object_instance)
{
    return object_instance.packed_data & 0xFF;
}

bool IsPixelVisible(vec3 clip_min, vec3 clip_max)
{
    vec2 dim = (clip_max.xy - clip_min.xy) * 0.5 * vec2(push_constants.depth_pyramid_dimensions);

    return max(dim.x, dim.y) < 16.0;
}

float GetDepthAtTexel(vec2 texcoord, int mip)
{
    ivec2 mip_dimensions = textureSize(sampler2D(depth_pyramid, depth_pyramid_sampler), mip);

    return Texture2DTexelLod(
        depth_pyramid_sampler,
        depth_pyramid,
        clamp(ivec2(texcoord * mip_dimensions), ivec2(0), mip_dimensions - ivec2(1)),
        mip
    ).r;
}

void main()
{
    const uint id = gl_GlobalInvocationID.x;
    const uint index = push_constants.batch_offset + id;

    if (id >= push_constants.num_drawables) {
        return;
    }

    ObjectInstance object_instance = instances[index];
    const uint entity_id = object_instance.entity_id;
    const uint draw_command_index = object_instance.draw_command_index;

    uint num_instances = 0;

    AABB aabb;
    aabb.max = object_instance.aabb_max.xyz;
    aabb.min = object_instance.aabb_min.xyz;

    uint cull_bits = 0x7F;
    bool skip_check = bool(GetObjectBucket(object_instance) & (1 << HYP_OBJECT_BUCKET_SKYBOX));

    num_instances += int(skip_check);

    // entity id should not ever be zero/unset
    if (all(bvec3(!skip_check, entity_id, push_constants.scene_id))) {
        // get view/proj matrices from scene.
        mat4 view = scene.view;
        mat4 proj = scene.projection;

        vec4 clip_pos = vec4(0.0);
        vec3 clip_min = vec3(1.0, 1.0, 1.0);
        vec3 clip_max = vec3(-1.0, -1.0, 0.0);

        // transform worldspace aabb to screenspace
        for (int i = 0; i < 8; i++) {
            vec4 projected_corner = proj * view * vec4(AABBGetCorner(aabb, i), 1.0);
            cull_bits &= GetCullBits(projected_corner);

            clip_pos = projected_corner;
            clip_pos.z = max(clip_pos.z, 0.0);
            clip_pos.xyz /= clip_pos.w;
            clip_pos.xy = clamp(clip_pos.xy, -1.0, 1.0);

            clip_min = min(clip_pos.xyz, clip_min);
            clip_max = max(clip_pos.xyz, clip_max);
        }

        if (cull_bits == 0) {
            clip_min.xy = clip_min.xy * vec2(0.5) + vec2(0.5);
            clip_max.xy = clip_max.xy * vec2(0.5) + vec2(0.5);

            vec2 dimensions = vec2(push_constants.depth_pyramid_dimensions);

            // Calculate hi-Z buffer mip
            vec2 size = (clip_max.xy - clip_min.xy) * max(dimensions.x, dimensions.y);
            int mip = int(ceil(log2(max(size.x, size.y))));

            vec2 sample_coord = (clip_min.xy + clip_max.xy) * 0.5;

            const vec4 depths = {
                GetDepthAtTexel(clip_min.xy, mip).r,
                GetDepthAtTexel(vec2(clip_max.x, clip_min.y), mip).r,
                GetDepthAtTexel(vec2(clip_min.x, clip_max.y), mip).r,
                GetDepthAtTexel(clip_max.xy, mip).r
            };

            // //find the max depth
            float max_depth = max(max(max(depths.x, depths.y), depths.z), depths.w);
            num_instances += int(clip_min.z <= max_depth);
        }
    }

    indirect_draw_commands[draw_command_index].index_count = object_instance.num_indices;
    indirect_draw_commands[draw_command_index].instance_count = num_instances;
    indirect_draw_commands[draw_command_index].first_index = 0;
    indirect_draw_commands[draw_command_index].vertex_offset = 0;
    indirect_draw_commands[draw_command_index].first_instance = 0;
}