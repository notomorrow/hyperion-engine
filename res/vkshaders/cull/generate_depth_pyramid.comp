#version 450

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_nonuniform_qualifier : require

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

#include "../include/defines.inc"
#include "../include/shared.inc"
#include "./shared.inc"

layout(set = 0, binding = 0) uniform texture2D mip_in;
layout(set = 0, binding = 1, r32f) uniform writeonly image2D mip_out;
layout(set = 0, binding = 2) uniform sampler depth_pyramid_sampler;

layout(push_constant) uniform DepthPyramidData
{
    uvec2 mip_dimensions;
    uvec2 prev_mip_dimensions;
    uint mip_level;
};

float GetDepthAtTexel(vec2 texcoord, ivec2 offset)
{
    const ivec2 texel_coord = clamp(
        ivec2((texcoord * vec2(prev_mip_dimensions)) + vec2(offset)),
        ivec2(0),
        ivec2(prev_mip_dimensions) - ivec2(1)
    );

    return Texture2DTexelLod(depth_pyramid_sampler, mip_in, texel_coord, 0).r;
}

void main()
{
    const uvec2 coord = gl_GlobalInvocationID.xy;

    if (any(greaterThan(coord, mip_dimensions - uvec2(1)))) {
        return;
    }

    const vec2 texcoord = vec2(coord) / vec2(mip_dimensions);

    float depth = 0.0;

    if (mip_level == 0) {
       depth = GetDepthAtTexel(texcoord, ivec2(0));
    } else {
        for (int i = 0; i < HYP_NUM_DEPTH_PYRAMID_OFFSETS; i++) {
            depth = HYP_DEPTH_CMP(depth, GetDepthAtTexel(texcoord, depth_pyramid_offsets[i]));
        }
    }

    imageStore(mip_out, ivec2(coord), vec4(depth));
}

#undef HYP_DEPTH_CMP
