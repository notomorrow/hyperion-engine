#version 450

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_scalar_block_layout  : require
#extension GL_EXT_nonuniform_qualifier : require

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform texture2D blur_input_texture;
layout(set = 0, binding = 1) uniform texture2D prev_blur_input_texture;
layout(set = 0, binding = 2) uniform texture2D velocity_texture;
layout(set = 0, binding = 3) uniform sampler sampler_linear;
layout(set = 0, binding = 4) uniform sampler sampler_nearest;
layout(set = 0, binding = 5, rgba8) uniform writeonly image2D blur_output_image;

#define HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS
#include "./include/defines.inc"
#include "./include/packing.inc"
#include "./include/defines.inc"
#include "./include/packing.inc"
#include "./include/shared.inc"
#include "./include/scene.inc"
#include "./include/Temporal.glsl"
#undef HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS

layout(std140, set = 0, binding = 6, row_major) readonly buffer SceneBuffer
{
    Scene scene;
};

void main(void)
{
    const ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    const ivec2 output_dimensions = imageSize(blur_output_image);

    if (any(greaterThanEqual(coord, output_dimensions))) {
        return;
    }

	const vec2 uv = (vec2(coord) + 0.5) / vec2(output_dimensions);

    vec4 output_color = Texture2D(sampler_nearest, blur_input_texture, uv);

    float blending = 0.92;
    vec2 velocity = Texture2D(sampler_nearest, velocity_texture, uv).rg;
    const float velocity_scale = 1.0;
    blending = blending - ((length(velocity) - 0.001) * velocity_scale);

    vec4 previous_color = Texture2D(sampler_linear, prev_blur_input_texture, uv - velocity);
    previous_color = ClampColor_3x3(blur_input_texture, previous_color, uv, vec2(1.0) / vec2(output_dimensions));

    output_color = mix(output_color, previous_color, blending);

    imageStore(blur_output_image, coord, vec4(output_color));
}
