
#version 450

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_scalar_block_layout  : require
#extension GL_EXT_nonuniform_qualifier : require

#define SIZE_X 8
#define SIZE_Y 8
#define SIZE_Z 8

layout(local_size_x = SIZE_X, local_size_y = SIZE_Y, local_size_z = SIZE_Z) in;

#include "../include/defines.inc"
#include "../include/shared.inc"
#include "../include/tonemap.inc"

#define HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS
#include "../include/env_probe.inc"
#include "../include/scene.inc"

#define SH_GRID_BUFFER_SIZE HYP_MAX_BOUND_AMBIENT_PROBES * 9

layout(std140, set = 0, binding = 0) buffer SHGridBuffer {
    vec4 sh_grid_buffer[SH_GRID_BUFFER_SIZE];
};

layout(set = 0, binding = 1) uniform sampler sampler_nearest;

layout(set = 0, binding = 2, rgba16f) uniform image3D sh_clipmaps[9];

layout(set = 0, binding = 3) uniform texture2D gbuffer_depth_texture;

layout(std140, set = 0, binding = 4, row_major) readonly buffer SceneBuffer {
    Scene scene;
};

layout(std140, set = 0, binding = 5, row_major) uniform CameraShaderData
{
    Camera camera;
};

layout(set = 0, binding = 6) uniform EnvGridBuffer {
    EnvGrid env_grid;
};

layout(std430, set = 0, binding = 7, row_major) readonly buffer EnvProbesBuffer {
    EnvProbe env_probes[];
};

layout(push_constant) uniform PushConstant {
    uvec4 clipmap_dimensions;
    vec4 cage_center_world;
};

int GetLocalEnvProbeIndex(vec3 world_position, out ivec3 unit_diff)
{
    const vec3 size_of_probe = env_grid.aabb_extent.xyz / vec3(env_grid.density.xyz);
    const ivec3 position_units = ivec3(world_position / size_of_probe + (vec3(env_grid.density.xyz) * 0.5));
    const ivec3 position_offset = position_units % ivec3(env_grid.density.xyz);

    unit_diff = position_offset;

    int probe_index_at_point = (int(unit_diff.x) * int(env_grid.density.y) * int(env_grid.density.z))
        + (int(unit_diff.y) * int(env_grid.density.z))
        + int(unit_diff.z) + 1 /* + 1 because the first element is always the reflection probe */;

    return probe_index_at_point;
}

mat4 inverse_projection = inverse(camera.projection);

float GetViewSpaceDepth(vec2 uv, float depth)
{
    return ReconstructViewSpacePositionFromDepth(inverse_projection, uv, depth).z;
}

void SetSH9InClipmap(uvec3 position, const in SH9 sh)
{
    imageStore(sh_clipmaps[0], ivec3(position), vec4(sh.values[0], 1.0));
    imageStore(sh_clipmaps[1], ivec3(position), vec4(sh.values[1], 1.0));
    imageStore(sh_clipmaps[2], ivec3(position), vec4(sh.values[2], 1.0));
    imageStore(sh_clipmaps[3], ivec3(position), vec4(sh.values[3], 1.0));
    imageStore(sh_clipmaps[4], ivec3(position), vec4(sh.values[4], 1.0));
    imageStore(sh_clipmaps[5], ivec3(position), vec4(sh.values[5], 1.0));
    imageStore(sh_clipmaps[6], ivec3(position), vec4(sh.values[6], 1.0));
    imageStore(sh_clipmaps[7], ivec3(position), vec4(sh.values[7], 1.0));
    imageStore(sh_clipmaps[8], ivec3(position), vec4(sh.values[8], 1.0));
}

void main(void)
{
    const uvec3 id = uvec3(gl_GlobalInvocationID.xyz);

    if (any(greaterThanEqual(id, clipmap_dimensions.xyz))) {
        return;
    }

    SH9 sh;

    vec3 uv = (vec3(id) + 0.5) / vec3(clipmap_dimensions.xyz);

    const vec3 scale = vec3(PROBE_CAGE_VIEW_RANGE) / vec3(clipmap_dimensions.xyz);
    const vec3 camera_position_snapped = (floor(cage_center_world.xyz / scale) + 0.5) * scale;

    const vec3 world_position = camera_position_snapped + ((((vec3(id) - vec3(clipmap_dimensions.xyz) * 0.5)) * scale));

    ivec3 probe_position;
    int probe_index_at_point = GetLocalEnvProbeIndex(world_position, probe_position);

    if (probe_index_at_point >= 1 && probe_index_at_point < HYP_MAX_BOUND_AMBIENT_PROBES) {
        const uint probe_index = GET_GRID_PROBE_INDEX(probe_index_at_point);

        if (probe_index != ~0u) {
            EnvProbe probe = env_probes[probe_index];
            const int storage_index = probe.position_in_grid.w * 9;

            for (int i = 0; i < 9; i++) {
                // sh.values[i] = UINT_TO_VEC4(probe_index).rgb;
                sh.values[i] = sh_grid_buffer[min(storage_index + i, SH_GRID_BUFFER_SIZE - 1)].rgb;
                // sh.values[i] = vec3(distance(world_position, cage_center_world.xyz) / PROBE_CAGE_VIEW_RANGE);//sh_grid_buffer[min(storage_index + i, SH_GRID_BUFFER_SIZE - 1)].rgb;
            }

            SetSH9InClipmap(id, sh);

            return;
        }
    }

    for (int i = 0; i < 9; i++) {
        sh.values[i] = vec3(0.0, 0.0, 0.0);
    }

    SetSH9InClipmap(id, sh);

}
