#version 450
#extension GL_GOOGLE_include_directive : require

#include "ssr_header.inc"

layout(set = HYP_DESCRIPTOR_SET_GLOBAL, binding = 12, rgba8) uniform writeonly image2D ssr_uvs;

#define SSR_EYE_FADE_START 0.8
#define SSR_EYE_FADE_END 0.995
#define SSR_JITTER_OFFSET 0.0

vec2 scene_resolution = vec2(ssr_params.dimension);

bool TraceRays(
    vec3 ray_origin,
    vec3 ray_direction,
    float jitter,
    out vec2 hit_pixel,
    out vec3 hit_point,
    out float num_iterations
)
{
    bool intersect = false;
    num_iterations = 0.0;

    vec3 step = ssr_params.ray_step * normalize(ray_direction);
    vec3 marching_position = ray_origin;
    float depth_from_screen;
    float step_delta;

    const mat4 inverse_proj = inverse(scene.projection);

    int i = 0;

	for (; i < ssr_params.num_iterations; i++) {
        marching_position += step;

        hit_pixel = GetProjectedPositionFromView(scene.projection, marching_position);

        float depth = SampleDepth(hit_pixel);

        depth_from_screen = ReconstructViewSpacePositionFromDepth(inverse_proj, hit_pixel, depth).z;
        step_delta = marching_position.z - depth_from_screen;

        intersect = step_delta > 0.0;
        num_iterations += 1.0;

        if (intersect) {
            break;
        }
    }

	if (intersect) {
		// binary search
		for (; i < ssr_params.num_iterations; i++) {
            step *= 0.5;
            marching_position = marching_position - step * sign(step_delta);

            hit_pixel = GetProjectedPositionFromView(scene.projection, marching_position);
            depth_from_screen = abs(ReconstructViewSpacePositionFromDepth(inverse_proj, hit_pixel, SampleDepth(hit_pixel)).z);
            step_delta = abs(marching_position.z) - depth_from_screen;

            if (abs(step_delta) < ssr_params.distance_bias) {
                return true;
            }
        }
    }

    return false;
}

float CalculateAlpha(
    float num_iterations, float reflectivity,
    vec2 hit_pixel, vec3 hit_point, float dist, vec3 ray_direction
)
{
    float alpha = 1.0;
    // Fade ray hits that approach the maximum iterations
    alpha *= 1.0 - (num_iterations / ssr_params.num_iterations);

    // Fade ray hits that approach the screen edge
    vec2 hit_pixel_ndc = hit_pixel * 2.0 - 1.0;
    float max_dimension = min(1.0, max(abs(hit_pixel_ndc.x), abs(hit_pixel_ndc.y)));
    alpha *= 1.0 - max(0.0, max_dimension - ssr_params.screen_edge_fade_start) / (1.0 - ssr_params.screen_edge_fade_end);

    // Fade ray hits base on how much they face the camera
    float eye_direction = clamp(ray_direction.z, ssr_params.eye_fade_start, ssr_params.eye_fade_end);
    alpha *= 1.0 - (eye_direction - ssr_params.eye_fade_start) / (ssr_params.eye_fade_end - ssr_params.eye_fade_start);

    // Fade ray hits based on distance from ray origin
    //alpha *= 1.0 - clamp(dist / ssr_params.max_ray_distance, 0.0, 1.0);

    return alpha;
}

void main(void)
{
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
	vec2  texcoord = vec2(coord) / vec2(ssr_params.dimension.x, ssr_params.dimension.y);

    const mat4 inverse_proj = inverse(scene.projection);

    float roughness = SampleGBuffer(gbuffer_material_texture, texcoord).r;
	vec3 N = DecodeNormal(SampleGBuffer(gbuffer_normals_texture, texcoord));
    vec3 view_space_normal = normalize((scene.view * vec4(N, 0.0)).xyz);

    vec3 ray_origin = ReconstructViewSpacePositionFromDepth(inverse_proj, texcoord, SampleDepth(texcoord)).xyz;
    vec3 ray_direction = normalize(reflect(normalize(ray_origin), view_space_normal));

	vec2 hit_pixel;
    vec3 hit_point;
    float num_iterations;

    vec2 uv2 = texcoord * scene_resolution;
    float jitter = fract((texcoord.x + texcoord.y) * 0.25 + SSR_JITTER_OFFSET);

    bool intersect = TraceRays(ray_origin, ray_direction, jitter, hit_pixel, hit_point, num_iterations);

    float dist = distance(ray_origin, hit_point);

    float alpha = CalculateAlpha(num_iterations, 1.0 /* reflectivity */, hit_pixel, hit_point, dist, ray_direction) * float(intersect);

    if (!intersect) {
        imageStore(ssr_uvs, coord, vec4(0.0));

        return;
    }

    imageStore(ssr_uvs, coord, vec4(hit_pixel, 0.0, alpha));
}