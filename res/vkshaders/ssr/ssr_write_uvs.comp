#version 450
#extension GL_GOOGLE_include_directive : require

#include "ssr_header.inc"
#include "../include/noise.inc"
#include "../include/brdf.inc"

layout(set = 0, binding = 0, UV_FORMAT) uniform writeonly image2D ssr_uvs;

#include "../include/Temporal.glsl"

bool TraceRays(
    vec3 ray_origin,
    vec3 ray_direction,
    out vec2 hit_pixel,
    out vec3 hit_point,
    out float hit_weight,
    out float num_iterations
)
{
    bool intersect = false;
    num_iterations = 0.0;
    hit_weight = 0.0;
    hit_pixel = vec2(0.0);
    hit_point = vec3(0.0);

    vec3 ray_step = ssr_params.ray_step * normalize(ray_direction);
    vec3 marching_position = ray_origin;
    float depth_from_screen;
    float step_delta;

    const mat4 inverse_proj = inverse(camera.projection);

    vec4 view_space_position;

    int i = 0;

    for (; i < ssr_params.num_iterations; i++) {
        marching_position += ray_step;

        hit_pixel = GetProjectedPositionFromView(camera.projection, marching_position);
        view_space_position = ReconstructViewSpacePositionFromDepth(inverse_proj, hit_pixel, SampleDepth(hit_pixel));

        step_delta = marching_position.z - view_space_position.z;

        intersect = step_delta > 0.0;
        num_iterations += 1.0;

        if (intersect) {
            break;
        }
    }

    if (intersect) {
        // binary search
        for (; i < ssr_params.num_iterations; i++) {
            ray_step *= 0.5;
            marching_position = marching_position - ray_step * sign(step_delta);

            hit_pixel = GetProjectedPositionFromView(camera.projection, marching_position);
            view_space_position = ReconstructViewSpacePositionFromDepth(inverse_proj, hit_pixel, SampleDepth(hit_pixel));
            
            step_delta = abs(marching_position.z) - view_space_position.z;

            if (abs(step_delta) < ssr_params.distance_bias) {
                return true;
            }
        }
    }

    return false;
}

float CalculateAlpha(
    float num_iterations,
    vec2 hit_pixel,
    vec3 hit_point,
    float dist,
    vec3 ray_direction
)
{
    float alpha = 1.0;
    // Fade ray hits that approach the maximum iterations
    alpha *= 1.0 - (num_iterations / ssr_params.num_iterations);

    // Fade ray hits that approach the screen edge
    vec2 hit_pixel_ndc = hit_pixel * 2.0 - 1.0;
    float max_dimension = saturate(max(abs(hit_pixel_ndc.x), abs(hit_pixel_ndc.y)));
    // alpha *= 1.0 - max(0.0, max_dimension - ssr_params.screen_edge_fade_start) / (1.0 - ssr_params.screen_edge_fade_end);

    alpha = 1.0 - smoothstep(0.06, 0.95, max_dimension);

    return alpha;
}

void main(void)
{
    uvec2 coord = uvec2(gl_GlobalInvocationID.xy);

    if (any(greaterThanEqual(coord, ssr_params.dimension.xy))) {
        return;
    }

    // if (((coord.x * ssr_params.dimension.y + ssr_params.dimension.x) & 1) == (scene.frame_counter & 1)) {
    //     return;
    // }

    vec2 texcoord = saturate((vec2(coord) + 0.5) / vec2(ssr_params.dimension.xy));

    const mat4 inverse_proj = inverse(camera.projection);
    const mat4 inverse_view = inverse(camera.view);

    const float roughness = Texture2D(sampler_nearest, gbuffer_material_texture, texcoord).r;
    const float perceptual_roughness = sqrt(roughness);

    const float depth = SampleDepth(texcoord);

    if (depth > 0.9995) {// || perceptual_roughness > HYP_SSR_ROUGHNESS_MAX) {
        imageStore(ssr_uvs, ivec2(coord), vec4(0.0));
        return;
    }

    vec3 N = normalize(DecodeNormal(Texture2D(sampler_nearest, gbuffer_normals_texture, texcoord)));

    vec3 P = ReconstructViewSpacePositionFromDepth(inverse_proj, texcoord, depth).xyz;
    vec3 V = normalize(vec3(0.0) - P);
    vec3 view_space_normal = normalize((camera.view * vec4(N, 0.0)).xyz);
    vec3 world_space_position = (inverse_view * vec4(P, 1.0)).xyz;

    vec3 tangent;
    vec3 bitangent;
    ComputeOrthonormalBasis(N, tangent, bitangent);

    const vec2 texel_size = vec2(1.0) / vec2(ssr_params.dimension.xy);
    const float texel_size_max = max(texel_size.x, texel_size.y);

    //vec3 ray_origin = (camera.view * vec4(world_space_position + N * 0.25, 1.0)).xyz;//
    vec3 ray_origin = P + N * 0.001;// + view_space_normal * texel_size_max;
    
#ifdef HYP_SSR_ROUGHNESS_SCATTERING
    vec2 blue_noise_sample = vec2(
        SampleBlueNoise(int(coord.x), int(coord.y), 0, 0),
        SampleBlueNoise(int(coord.x), int(coord.y), 0, 1)
    );

    vec2 blue_noise_scaled = blue_noise_sample + float(scene.frame_counter % 16) * 1.618;
    const vec2 rnd = fmod(blue_noise_scaled, vec2(1.0));
    
    vec3 H = ImportanceSampleGGX(rnd, N, perceptual_roughness);
    H = tangent * H.x + bitangent * H.y + N * H.z;

    vec3 ray_direction = reflect(-V, normalize((camera.view * vec4(H, 0.0)).xyz));

    // vec2 rnd = Hammersley(scene.frame_counter & 7, 8);

    // vec3 H = ImportanceSampleGGX(rnd, N, perceptual_roughness);
    // H = tangent * H.x + bitangent * H.y + N * H.z;

    // vec3 ray_direction = normalize(2.0 * dot(V, H) * H - V);
    // ray_direction = (camera.view * vec4(ray_direction, 0.0)).xyz;

#else
    vec3 ray_direction = reflect(normalize(ray_origin), view_space_normal);
#endif

    vec2 hit_pixel;
    vec3 hit_point;
    float hit_weight;
    float num_iterations;

    bool intersect = TraceRays(ray_origin, ray_direction, hit_pixel, hit_point, hit_weight, num_iterations);

    float dist = distance(ray_origin, hit_point);

    float alpha = CalculateAlpha(num_iterations, hit_pixel, hit_point, dist, ray_direction) * float(intersect);

    alpha *= float(hit_pixel == saturate(hit_pixel));
    hit_pixel *= float(alpha > HYP_FMATH_EPSILON);

    imageStore(ssr_uvs, ivec2(coord), vec4(hit_pixel, 0.0, alpha));
}