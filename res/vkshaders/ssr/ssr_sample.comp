#version 450
#extension GL_GOOGLE_include_directive : require

#include "ssr_header.inc"
#include "../include/noise.inc"
#include "../include/shared.inc"

#define SSR_KERNEL_SIZE 8

layout(set = HYP_DESCRIPTOR_SET_GLOBAL, binding = 12, rgba8) uniform readonly image2D ssr_uv_image;
layout(set = HYP_DESCRIPTOR_SET_GLOBAL, binding = 17) uniform texture2D ssr_uvs;
layout(set = HYP_DESCRIPTOR_SET_GLOBAL, binding = 13, rgba8) uniform writeonly image2D ssr_sample;
layout(set = HYP_DESCRIPTOR_SET_GLOBAL, binding = 14, r8) uniform writeonly image2D ssr_radius;

const vec2 ssr_offsets[SSR_KERNEL_SIZE] = vec2[SSR_KERNEL_SIZE]( 
    vec2(0, 0),
    vec2(2, -2),
    vec2(-2, -2),
    vec2(0, 2),
    vec2(-2, 0),
    vec2(0, -2),
    vec2(2, 0),
    vec2(2, 2)
);

void main(void)
{
    const ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
	const vec2 texcoord = vec2(coord) / vec2(ssr_params.dimension.x, ssr_params.dimension.y);

    const float gradient_noise = InterleavedGradientNoise(vec2(coord));

    const vec4 uv_sample = imageLoad(ssr_uv_image, coord);
    const vec2 uv = uv_sample.xy;
    const float alpha = uv_sample.w;

    vec4 reflection_sample = vec4(0.0);

    float depth = SampleGBuffer(gbuffer_depth_texture, texcoord).r;
    vec3 P = ReconstructWorldSpacePositionFromDepth(inverse(scene.projection), inverse(scene.view), texcoord, depth).xyz;
    vec3 N = DecodeNormal(SampleGBuffer(gbuffer_normals_texture, texcoord));
    vec3 V = normalize(scene.camera_position.xyz - P);
    float roughness = 0.0;

    float out_radius = 0.0;
    float accum_radius = 0.0;

    const vec2 ssr_image_dimensions = vec2(ssr_params.dimension.x, ssr_params.dimension.y);

    if (alpha > 0.0) {
        roughness = SampleGBuffer(gbuffer_material_texture, texcoord).r;
        roughness = clamp(roughness, 0.001, 0.999);

        const float cone_angle = RoughnessToConeAngle(roughness);

        const float trace_size = float(max(ssr_params.dimension.x, ssr_params.dimension.y));
        const float max_mip_level = 5.0;

        vec2 sample_texcoord = texcoord;//+ (offset * filter_size);
        ivec2 sample_coord = ivec2(sample_texcoord * vec2(ssr_params.dimension));

        vec4 hit_data = imageLoad(ssr_uv_image, sample_coord);
        vec2 hit_uv = hit_data.xy;
        float hit_mask = hit_data.w;

        if (hit_mask >= 0.001) {
            // TODO: come back to to make sure cone stuff is correct
            const float current_radius = length((hit_uv - texcoord) * ssr_params.dimension) * tan(cone_angle);

            float mip_level = clamp(log2(current_radius), 0.0, max_mip_level);

            vec4 current_reflection_sample = Texture2DLod(HYP_SAMPLER_LINEAR, gbuffer_mip_chain, hit_uv, mip_level);
            current_reflection_sample.a = hit_mask;

            reflection_sample += current_reflection_sample;

            accum_radius = current_radius;
        }

        reflection_sample *= clamp(1.0 - (roughness / HYP_SSR_ROUGHNESS_MAX), 0.0, 1.0);
        reflection_sample.a *= alpha;
    }

    out_radius = accum_radius;

    imageStore(ssr_sample, coord, reflection_sample);
    imageStore(ssr_radius, coord, vec4(out_radius / 255.0));
}
