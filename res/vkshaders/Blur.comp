
#version 450

#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#include "include/shared.inc"

#ifndef OUTPUT_FORMAT
    #if defined(OUTPUT_RGBA8)
        #define OUTPUT_FORMAT rgba8
    #elif defined(OUTPUT_RGBA16F)
        #define OUTPUT_FORMAT rgba16f
    #elif defined(OUTPUT_RGBA32F)
        #define OUTPUT_FORMAT rgba32f
    #else
        #define OUTPUT_FORMAT rgba8
    #endif
#endif

layout(set = 0, binding = 0) uniform texture2D input_texture;
layout(set = 0, binding = 1) uniform texture2D depth_texture;
layout(set = 0, binding = 2) uniform sampler sampler_nearest;
layout(set = 0, binding = 3) uniform sampler sampler_linear;
layout(set = 0, binding = 4, OUTPUT_FORMAT) uniform writeonly image2D output_image;

layout(push_constant) uniform PushConstant
{
    uvec2 depth_texture_dimensions;
    uvec2 output_image_dimensions;
};

void main(void)
{
    const ivec2 coord = ivec2(gl_GlobalInvocationID.xy);

    if (any(greaterThanEqual(coord, output_image_dimensions))) {
        return;
    }

	const vec2 texcoord = (vec2(coord) + 0.5) / vec2(output_image_dimensions);

    const vec2 texel_size = vec2(1.0) / vec2(depth_texture_dimensions);
    const float depth = Texture2D(sampler_nearest, depth_texture, texcoord).r;

    const float blur_amount = 1.5;

    vec4 accum_sample = vec4(0.0);
    float accum_radius = 0.0;

    for (int x = -1; x <= 1; ++x) {
#ifdef HORIZONTAL
        vec2 offset_coord = ivec2(x, 0);
#else
        vec2 offset_coord = ivec2(0, x);
#endif

        vec2 offset_texcoord = offset_coord * blur_amount * texel_size / depth;
        vec4 offset_sample = Texture2D(sampler_linear, input_texture, Saturate(texcoord + offset_texcoord));

        accum_sample += offset_sample;
    }

    accum_sample /= 3.0;

    imageStore(output_image, coord, accum_sample);
}
