
#version 450

#extension GL_GOOGLE_include_directive : require


#define PROBE_SIDE_LENGTH 32
#define PROBE_SIDE_LENGTH_BORDER (PROBE_SIDE_LENGTH + 2)

layout(local_size_x = PROBE_SIDE_LENGTH, local_size_y = PROBE_SIDE_LENGTH, local_size_z = 1) in;

#include "../include/defines.inc"
#include "../include/shared.inc"
#include "../include/tonemap.inc"

#define HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS
#include "../include/env_probe.inc"

#include "../include/Octahedron.glsl"

layout(set = 0, binding = 0) uniform textureCube color_texture;
layout(set = 0, binding = 1) uniform textureCube normals_texture;
layout(set = 0, binding = 2) uniform textureCube depth_texture;

layout(set = 0, binding = 3) uniform sampler sampler_linear;
layout(set = 0, binding = 4) uniform sampler sampler_nearest;

layout(set = 0, binding = 5, rgba8) uniform writeonly image2D color_image;
layout(set = 0, binding = 6, rg16f) uniform writeonly image2D normals_image;
layout(set = 0, binding = 7, rg16f) uniform writeonly image2D depth_image;

layout(push_constant) uniform PushConstant
{
    uvec4 probe_grid_position;
    uvec4 cubemap_dimensions;
    uvec2 probe_offset_coord;
};

vec3 MapXYSToDirection(uint face_index, vec2 uv) {
    vec3 dir = vec3(0.0);

    float u = uv.x;
    float v = -uv.y;

    // +x, -x, +y, -y, +z, -z
    switch (face_index) {
    case 0:
        dir = normalize(vec3(1.0, v, -u));
        break;
    case 1:
        dir = normalize(vec3(-1.0, v, u));
        break;
    case 2:
        dir = normalize(vec3(u, 1.0, -v));
        break;
    case 3:
        dir = normalize(vec3(u, -1.0, v));
        break;
    case 4:
        dir = normalize(vec3(u, v, 1.0));
        break;
    case 5:
        dir = normalize(vec3(-u, v, -1.0));
        break;
    }

    return dir;
}

vec2 NormalizeOctahedralCoord(uvec2 coord)
{
    ivec2 oct_frag_coord = ivec2((int(coord.x) - 2) % PROBE_SIDE_LENGTH_BORDER, (int(coord.y) - 2) % PROBE_SIDE_LENGTH_BORDER);
    
    return (vec2(oct_frag_coord) + vec2(0.5)) * (2.0 / float(PROBE_SIDE_LENGTH)) - vec2(1.0);
}

void main(void)
{
    const uvec2 coord = probe_offset_coord + uvec2(gl_GlobalInvocationID.xy) + uvec2(1);
    
    const vec3 dir = DecodeOctahedralCoord(NormalizeOctahedralCoord(coord));

    const vec4 color_sample = TextureCube(sampler_linear, color_texture, dir);
    const vec2 normals_sample = TextureCube(sampler_nearest, normals_texture, dir).rg;
    const vec2 depth_sample = TextureCube(sampler_nearest, depth_texture, dir).rg;

    // const float depth_sample_squared = depth_sample * depth_sample;

    imageStore(
        color_image,
        ivec2(coord),
        color_sample
    );

    imageStore(
        normals_image,
        ivec2(coord),
        vec4(normals_sample, 0.0, 0.0)
    );

    imageStore(
        depth_image,
        ivec2(coord),
        vec4(depth_sample, 0.0, 0.0)
    );



    // const vec2 size_per_sample = vec2(cubemap_dimensions.xy) / vec2(NUM_SAMPLES_X, NUM_SAMPLES_Y);
    // const vec2 sample_fract = size_per_sample * vec2(sample_index);

    // const vec2 texel_size = vec2(1.0) / vec2(cubemap_dimensions.xy);
    // const vec2 uv = vec2((sample_fract + 0.5) * texel_size);
    // const vec2 sample_point = uv * 2.0 - 1.0;
    
    // const vec3 dir = MapXYSToDirection(face_index, sample_point);


    
}
