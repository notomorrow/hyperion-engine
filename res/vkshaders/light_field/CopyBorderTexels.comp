#version 460

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_scalar_block_layout : require

#include "Shared.glsl"

#define GROUP_SIZE_X PROBE_SIDE_LENGTH
#define GROUP_SIZE_Y 4

layout(local_size_x = GROUP_SIZE_X, local_size_y = GROUP_SIZE_Y, local_size_z = 1) in;

layout(set = 0, binding = 5, rgba8) uniform image2D color_image;
layout(set = 0, binding = 7, rg16f) uniform image2D depth_image;

#ifdef DEPTH
    #define OUTPUT_IMAGE depth_image
#else
    #define OUTPUT_IMAGE color_image
#endif

layout(push_constant) uniform PushConstant
{
    uvec4 probe_grid_position;
    uvec4 cubemap_dimensions;
    uvec2 probe_offset_coord;
    uvec2 grid_dimensions;
};

const ivec4 g_offsets[132] = ivec4[](
    ivec4(32, 1, 1, 0),
    ivec4(31, 1, 2, 0),
    ivec4(30, 1, 3, 0),
    ivec4(29, 1, 4, 0),
    ivec4(28, 1, 5, 0),
    ivec4(27, 1, 6, 0),
    ivec4(26, 1, 7, 0),
    ivec4(25, 1, 8, 0),
    ivec4(24, 1, 9, 0),
    ivec4(23, 1, 10, 0),
    ivec4(22, 1, 11, 0),
    ivec4(21, 1, 12, 0),
    ivec4(20, 1, 13, 0),
    ivec4(19, 1, 14, 0),
    ivec4(18, 1, 15, 0),
    ivec4(17, 1, 16, 0),
    ivec4(16, 1, 17, 0),
    ivec4(15, 1, 18, 0),
    ivec4(14, 1, 19, 0),
    ivec4(13, 1, 20, 0),
    ivec4(12, 1, 21, 0),
    ivec4(11, 1, 22, 0),
    ivec4(10, 1, 23, 0),
    ivec4(9, 1, 24, 0),
    ivec4(8, 1, 25, 0),
    ivec4(7, 1, 26, 0),
    ivec4(6, 1, 27, 0),
    ivec4(5, 1, 28, 0),
    ivec4(4, 1, 29, 0),
    ivec4(3, 1, 30, 0),
    ivec4(2, 1, 31, 0),
    ivec4(1, 1, 32, 0),
    ivec4(32, 32, 1, 33),
    ivec4(31, 32, 2, 33),
    ivec4(30, 32, 3, 33),
    ivec4(29, 32, 4, 33),
    ivec4(28, 32, 5, 33),
    ivec4(27, 32, 6, 33),
    ivec4(26, 32, 7, 33),
    ivec4(25, 32, 8, 33),
    ivec4(24, 32, 9, 33),
    ivec4(23, 32, 10, 33),
    ivec4(22, 32, 11, 33),
    ivec4(21, 32, 12, 33),
    ivec4(20, 32, 13, 33),
    ivec4(19, 32, 14, 33),
    ivec4(18, 32, 15, 33),
    ivec4(17, 32, 16, 33),
    ivec4(16, 32, 17, 33),
    ivec4(15, 32, 18, 33),
    ivec4(14, 32, 19, 33),
    ivec4(13, 32, 20, 33),
    ivec4(12, 32, 21, 33),
    ivec4(11, 32, 22, 33),
    ivec4(10, 32, 23, 33),
    ivec4(9, 32, 24, 33),
    ivec4(8, 32, 25, 33),
    ivec4(7, 32, 26, 33),
    ivec4(6, 32, 27, 33),
    ivec4(5, 32, 28, 33),
    ivec4(4, 32, 29, 33),
    ivec4(3, 32, 30, 33),
    ivec4(2, 32, 31, 33),
    ivec4(1, 32, 32, 33),
    ivec4(1, 32, 0, 1),
    ivec4(1, 31, 0, 2),
    ivec4(1, 30, 0, 3),
    ivec4(1, 29, 0, 4),
    ivec4(1, 28, 0, 5),
    ivec4(1, 27, 0, 6),
    ivec4(1, 26, 0, 7),
    ivec4(1, 25, 0, 8),
    ivec4(1, 24, 0, 9),
    ivec4(1, 23, 0, 10),
    ivec4(1, 22, 0, 11),
    ivec4(1, 21, 0, 12),
    ivec4(1, 20, 0, 13),
    ivec4(1, 19, 0, 14),
    ivec4(1, 18, 0, 15),
    ivec4(1, 17, 0, 16),
    ivec4(1, 16, 0, 17),
    ivec4(1, 15, 0, 18),
    ivec4(1, 14, 0, 19),
    ivec4(1, 13, 0, 20),
    ivec4(1, 12, 0, 21),
    ivec4(1, 11, 0, 22),
    ivec4(1, 10, 0, 23),
    ivec4(1, 9, 0, 24),
    ivec4(1, 8, 0, 25),
    ivec4(1, 7, 0, 26),
    ivec4(1, 6, 0, 27),
    ivec4(1, 5, 0, 28),
    ivec4(1, 4, 0, 29),
    ivec4(1, 3, 0, 30),
    ivec4(1, 2, 0, 31),
    ivec4(1, 1, 0, 32),
    ivec4(32, 32, 33, 1),
    ivec4(32, 31, 33, 2),
    ivec4(32, 30, 33, 3),
    ivec4(32, 29, 33, 4),
    ivec4(32, 28, 33, 5),
    ivec4(32, 27, 33, 6),
    ivec4(32, 26, 33, 7),
    ivec4(32, 25, 33, 8),
    ivec4(32, 24, 33, 9),
    ivec4(32, 23, 33, 10),
    ivec4(32, 22, 33, 11),
    ivec4(32, 21, 33, 12),
    ivec4(32, 20, 33, 13),
    ivec4(32, 19, 33, 14),
    ivec4(32, 18, 33, 15),
    ivec4(32, 17, 33, 16),
    ivec4(32, 16, 33, 17),
    ivec4(32, 15, 33, 18),
    ivec4(32, 14, 33, 19),
    ivec4(32, 13, 33, 20),
    ivec4(32, 12, 33, 21),
    ivec4(32, 11, 33, 22),
    ivec4(32, 10, 33, 23),
    ivec4(32, 9, 33, 24),
    ivec4(32, 8, 33, 25),
    ivec4(32, 7, 33, 26),
    ivec4(32, 6, 33, 27),
    ivec4(32, 5, 33, 28),
    ivec4(32, 4, 33, 29),
    ivec4(32, 3, 33, 30),
    ivec4(32, 2, 33, 31),
    ivec4(32, 1, 33, 32),
    ivec4(32, 32, 0, 0),
    ivec4(1, 32, 33, 0),
    ivec4(32, 1, 0, 33),
    ivec4(1, 1, 33, 33)
);

void copy_texel(ivec2 current_coord, uint index)
{
    ivec2 src_coord = clamp(current_coord + g_offsets[index].xy, ivec2(0.0), ivec2(grid_dimensions - 1));
    ivec2 dst_coord = clamp(current_coord + g_offsets[index].zw, ivec2(0.0), ivec2(grid_dimensions - 1));

    imageStore(OUTPUT_IMAGE, dst_coord, imageLoad(OUTPUT_IMAGE, src_coord));
}

void main()
{
    const ivec2 current_coord = ivec2(probe_offset_coord);
    const uint index = gl_GlobalInvocationID.y * GROUP_SIZE_X + gl_GlobalInvocationID.x;

    copy_texel(current_coord, index);

    // switch (gl_GlobalInvocationID.y) {
    // case 0:
    //     imageStore(OUTPUT_IMAGE, current_coord + ivec2(0, gl_GlobalInvocationID.x), imageLoad(OUTPUT_IMAGE, (current_coord + ivec2(-2, gl_GlobalInvocationID.x)) % ivec2(grid_dimensions.xy)));

    //     break;
    // case 1:
    //     imageStore(OUTPUT_IMAGE, current_coord + ivec2(PROBE_SIDE_LENGTH_BORDER - 1, gl_GlobalInvocationID.x), imageLoad(OUTPUT_IMAGE, (current_coord + ivec2(PROBE_SIDE_LENGTH_BORDER + 1, gl_GlobalInvocationID.x)) % ivec2(grid_dimensions.xy)));

    //     break;
    // case 2:
    //     imageStore(OUTPUT_IMAGE, current_coord + ivec2(gl_GlobalInvocationID.x, 0), imageLoad(OUTPUT_IMAGE, (current_coord + ivec2(gl_GlobalInvocationID.x, -2)) % ivec2(grid_dimensions.xy)));

    //     break;
    // case 3:
    //     imageStore(OUTPUT_IMAGE, current_coord + ivec2(gl_GlobalInvocationID.x, PROBE_SIDE_LENGTH_BORDER - 1), imageLoad(OUTPUT_IMAGE, (current_coord + ivec2(gl_GlobalInvocationID.x, PROBE_SIDE_LENGTH_BORDER + 1)) % ivec2(grid_dimensions.xy)));

    //     break;
    // }

}


// void main()
// {
//     // TODO: Optimize. Inefficient!!

//     const uvec2 coord = uvec2(gl_GlobalInvocationID.xy);


//     for (int x = int(gl_GlobalInvocationID.x); x < int(gl_GlobalInvocationID.x) + GROUP_SIZE; x++) {
//         for (int y = int(gl_GlobalInvocationID.y); y < int(gl_GlobalInvocationID.y) + GROUP_SIZE; y++) {
//             const ivec2 coord = ivec2(x, y);

//             if (any(greaterThanEqual(coord, ivec2(image_dimensions.xy)))) {
//                 return;
//             }

//             if (coord.x == 0 || coord.y == 0 || coord.x == int(image_dimensions.x - 1) || coord.y == int(image_dimensions.y - 1)) {
//                 continue;
//             }

//             if (coord.x % (PROBE_SIDE_LENGTH + PROBE_BORDER_SIZE) == 0) {
//                 vec4 value = imageLoad(OUTPUT_IMAGE, ivec2(coord.x - 1, coord.y));
//                 imageStore(OUTPUT_IMAGE, coord, value);

//                 continue;
//             }

//             if (coord.x % (PROBE_SIDE_LENGTH + PROBE_BORDER_SIZE) == 1) {
//                 vec4 value = imageLoad(OUTPUT_IMAGE, ivec2(coord.x + 1, coord.y));
//                 imageStore(OUTPUT_IMAGE, coord, value);

//                 continue;
//             }

//             if (coord.y % (PROBE_SIDE_LENGTH + PROBE_BORDER_SIZE) == 0) {
//                 vec4 value = imageLoad(OUTPUT_IMAGE, ivec2(coord.x, coord.y - 1));
//                 imageStore(OUTPUT_IMAGE, coord, value);

//                 continue;
//             }

//             if (coord.y % (PROBE_SIDE_LENGTH + PROBE_BORDER_SIZE) == 1) {
//                 vec4 value = imageLoad(OUTPUT_IMAGE, ivec2(coord.x, coord.y + 1));
//                 imageStore(OUTPUT_IMAGE, coord, value);

//                 continue;
//             }
//         }
//     }
// }