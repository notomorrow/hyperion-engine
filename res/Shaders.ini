[DeferredIndirect]
permute = ENV_GRID_ENABLED, RT_REFLECTIONS_ENABLED, RT_GI_ENABLED, HBIL_ENABLED, HBAO_EABLED
frag = DeferredIndirect.frag
vert = Deferred.vert

[DeferredDirect]
permute = LIGHT_TYPE(DIRECTIONAL POINT SPOT AREA_RECT)
frag = DeferredDirect.frag
vert = Deferred.vert

[DeferredCombine]
permute = DEBUG(SSR SSGI HBAO HBIL REFLECTIONS IRRADIANCE), ENV_GRID_ENABLED, RT_REFLECTIONS_ENABLED, RT_GI_ENABLED, HBIL_ENABLED, HBAO_EABLED
frag = deferred/DeferredCombine.frag
vert = PostEffect.vert

[ApplyEnvGrid]
permute = MODE(RADIANCE IRRADIANCE), IRRADIANCE_MODE(SH VOXEL LIGHT_FIELD)
frag = deferred/ApplyEnvGrid.frag
vert = Deferred.vert

[ApplyReflectionProbe]
permute = ENV_PROBE_PARALLAX_CORRECTED
frag = deferred/ApplyReflectionProbe.frag
vert = Deferred.vert

[ApplyLightmap]
frag = deferred/ApplyLightmap.frag
vert = Deferred.vert

[Tonemap]
frag = Tonemap.frag
vert = PostEffect.vert

[FXAA]
frag = FXAA.frag
vert = PostEffect.vert

[DOFBlurDirection]
permute = DIRECTION(HORIZONTAL VERTICAL)
frag = dof/DOFBlurDirection.frag
vert = PostEffect.vert

[DOFBlurMix]
frag = dof/DOFBlurMix.frag
vert = PostEffect.vert

[ObjectVisibility]
permute = INSTANCING
comp = cull/object_visibility.comp

[GenerateDepthPyramid]
comp = cull/generate_depth_pyramid.comp

[GenerateMipmaps]
vert = PostEffect.vert
frag = GenerateMipmaps.frag

[RenderTextureToScreen]
permute = HALFRES
frag = RenderTextureToScreen.frag
vert = PostEffect.vert

[RenderTextureToScreen_UI]
frag = RenderTextureToScreen_UI.frag
vert = PostEffect.vert

[MergeHalfResTextures]
frag = MergeHalfResTextures.frag
vert = PostEffect.vert

[RenderToCubemap]
permute = MODE_SHADOWS, WRITE_NORMALS, WRITE_MOMENTS, INSTANCING, ENV_PROBE, SKINNING
frag = RenderToCubemap.frag
vert = RenderToCubemap.vert

[RenderSky]
frag = sky/RenderSky.frag
vert = sky/RenderSky.vert

[ComputeSH]
permute = MODE(CLEAR BUILD_COEFFICIENTS REDUCE FINALIZE), LIGHTING
comp = env_probe/ComputeSH.comp

[EnvProbe_VoxelizeProbe]
permute = MODE(VOXELIZE OFFSET)
comp = light_field/VoxelizeProbe.comp.glsl

[EnvProbe_ClearProbeVoxels]
comp = light_field/ClearProbeVoxels.comp.glsl

[LightField_CopyBorderTexels]
comp = light_field/CopyBorderTexels.comp

[LightField_ComputeIrradiance]
comp = light_field/ComputeIrradiance.comp

[LightField_ComputeFilteredDepth]
comp = light_field/ComputeFilteredDepth.comp

[ConvolveProbe]
permute = MODE_IRRADIANCE, LIGHTING
comp = env_probe/ConvolveProbe.comp

[Forward]
permute = SKINNING, FORWARD_LIGHTING, ALPHA_DISCARD, INSTANCING, UNLIT
frag = ForwardPass.frag
vert = Default.vert

[Vegetation]
frag = ForwardPass.frag
vert = Vegetation.vert

[Skybox]
permute = INSTANCING
frag = Skybox.frag
vert = Skybox.vert

[Terrain]
permute = INSTANCING
frag = Terrain.frag
vert = Default.vert

[HBAO]
permute = HBIL_ENABLED, HALFRES
frag = hbao/HBAO.frag
vert = PostEffect.vert

[GaussianSplatting]
frag = gaussian/Gaussian.frag.glsl
vert = gaussian/Gaussian.vert.glsl

[GaussianSplatting_UpdateSplats]
comp = gaussian/UpdateSplats.comp.glsl

[GaussianSplatting_SortSplats]
comp = gaussian/SortSplats.comp.glsl

[GaussianSplatting_UpdateDistances]
comp = gaussian/UpdateDistances.comp.glsl

[Particle]
frag = particles/Particle.frag
vert = particles/Particle.vert

[UpdateParticles]
permute = HAS_PHYSICS
comp = particles/UpdateParticles.comp

[Shadows]
permute = MODE(STANDARD VSM PCF CONTACT_HARDENED), INSTANCING, SKINNING, ALPHA_DISCARD
frag = shadow.frag
vert = Default.vert

[BlurShadowMap]
comp = shadow/BlurShadowMap.comp

[CombineShadowMaps]
permute = VSM
frag = shadow/CombineShadowMaps.frag
vert = PostEffect.vert

[SSRWriteUVs]
permute = OUTPUT(RGBA8 RGBA16F RGBA32F), CONE_TRACING, ROUGHNESS_SCATTERING
comp = ssr/SSRWriteUVs.comp

[SSRSampleGBuffer]
permute = OUTPUT(RGBA8 RGBA16F RGBA32F), CONE_TRACING
comp = ssr/SSRSampleGBuffer.comp

[SSGI]
permute = OUTPUT(RGBA8 RGBA16F RGBA32F)
comp = ssr/SSGI.comp

[UIObject]
permute = INSTANCING, TEXTURED
frag = ui/UIObject.frag
vert = ui/UIObject.vert

[DebugAABB]
permute = IMMEDIATE_MODE, INSTANCING
frag = DebugAABB.frag
vert = DebugAABB.vert

# SVO-based VCT

[SVOTagNodes]
comp = voxel/octree_tag_nodes.comp

[SVOAllocNodes]
comp = voxel/octree_alloc_nodes.comp

[SVOInitNodes]
comp = voxel/octree_init_nodes.comp

[SVOModifyArgs]
comp = voxel/octree_modify_args.comp

[SVOWriteMipmaps]
comp = voxel/octree_write_mipmaps.comp

# Texture-based VCT

[VCTGenerateMipmap]
comp = vct/GenerateMipmap.comp

# RT

[RTRadiance]
rgen = rt/RTRadiance.rgen
rchit = rt/RTRadiance.rchit
rmiss = rt/RTRadiance.rmiss

[PathTracer]
rgen = rt/pathtracer/PathTracer.rgen
rchit = rt/pathtracer/PathTracer.rchit
rmiss = rt/pathtracer/PathTracer.rmiss

[LightmapPathTracer]
permute = MODE(IRRADIANCE RADIANCE)
rgen = rt/lightmapper/LightmapPathTracer.rgen
rchit = rt/lightmapper/LightmapPathTracer.rchit
rmiss = rt/lightmapper/LightmapPathTracer.rmiss

[DDGI]
rgen = rt/gi/DDGI.rgen
rchit = rt/gi/DDGI.rchit
rmiss = rt/gi/DDGI.rmiss

[RTCopyBorderTexelsIrradiance]
comp = rt/copy_border_texels_irradiance.comp

[RTCopyBorderTexelsDepth]
comp = rt/copy_border_texels_depth.comp

[RTProbeUpdateIrradiance]
comp = rt/probe_update_irradiance.comp

[RTProbeUpdateDepth]
comp = rt/probe_update_depth.comp

# Temporal

[TemporalAA]
comp = TemporalAA.comp

[TemporalBlending]
permute = OUTPUT(RGBA8 RGBA16F RGBA32F), TEMPORAL_BLEND_TECHNIQUE(0 1 2 3 4), FEEDBACK(HIGH MEDIUM LOW)
comp = TemporalBlending.comp

[ImageBlurCompute]
permute = HORIZONTAL, OUTPUT(RGBA8 RGBA16F RGBA32F)
comp = Blur.comp

# Lightmapping
[DilateLightmap]
comp = lightmapping/DilateLightmap.comp.glsl

# Third Party Shaders

[FfxParallelSort_Reduce]
entry_point = FfxParallelSortReduce
comp = third_party/FfxParallelSort.hlsl

[FfxParallelSort_ScanAdd]
entry_point = FfxParallelSortScanAdd
comp = third_party/FfxParallelSort.hlsl

[FfxParallelSort_Scan]
entry_point = FfxParallelSortScan
comp = third_party/FfxParallelSort.hlsl

[FfxParallelSort_Scatter]
entry_point = FfxParallelSortScatter
comp = third_party/FfxParallelSort.hlsl

[FfxParallelSort_Count]
entry_point = FfxParallelSortCount
comp = third_party/FfxParallelSort.hlsl

# Testing

[TestHLSL]
vert = TestHLSL.hlsl