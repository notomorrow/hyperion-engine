#importpath "../" "../library";

class TestClass<T>
{
    func TestFunc(self, a : T, b : T) -> T
    {
        return a + b;
    }
}

func TestFunc2<T>(a : T, b : T) -> T
{
    Print("T = %\n", T);
    return a + b;
}

class TestScript
{
    TestScript(self : TestScript)
    {
    }

    func OnAdded(self : TestScript, scene : Scene, entity : UInt)
    {
        Print(Format("Test script added, self = %, scene = %, entity = %\n", self, scene.GetID(), entity));

        Print("TestFunc(1, 2) = %\n", new TestClass<Int>().TestFunc(1, 2));
        Print("typeof(TestFunc(1, 2)) = %\n", typeof(new TestClass<Int>().TestFunc(1, 2)));
        Print("typeof(TestFunc(1, 2)) = %\n", typeof(new TestClass<Float>().TestFunc(1.0, 2.5)));
        Print("TestFunc2(1, 2) = %\n", TestFunc2<Int>(1, 2));
        Print("typeof(TestFunc2(1, 2)) = %\n", typeof(TestFunc2<Int>(1, 2)));

        // scene.GetComponent<TransformComponent>(entity).SetTranslation(new Vec3f(0.0, 0.0, 0.0));s
        // scene.GetComponent(entity, "Transform").SetTranslation(new Vec3f(0.0, 0.0, 0.0));
    }

    func OnRemoved(self : TestScript)
    {
    }

    func OnTick(self : TestScript, delta : Float)
    {
        Print("Test script tick, self = %, delta = %\n", self, delta);
    }
}

export const controller = new TestScript();
