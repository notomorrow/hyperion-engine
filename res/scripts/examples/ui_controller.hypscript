#importpath "../" "../library";

import core::engine;
import core::{ AssertEqual, AssertNotEqual };
import scene::{ EntityProxy };

// dynamic import
// const tests = Module.Load("../tests");

enum UIEventType {
    NONE,

    MOUSE_DOWN,
    MOUSE_UP,
    MOUSE_DRAG,
    MOUSE_HOVER
}

class Controller
{
    receives_update : Bool = false;

    Controller(self : Controller)
    {
        Print("Construct Controller base\n");
    }

    func OnTick(self : Controller, delta : Float)
    {
        Print("Tick Base Component\n")
    }
}

class TestUIController : Controller
{
    click_position : Vector2 = new Vector2();
    entity : EntityProxy = null;

    TestUIController(self : TestUIController)
    {
        Print("TestUIController = %\n", TestUIController);
        Print("TestUIController.base = %\n", TestUIController.base);
        Print("self.class = %\n", self.class);
        Print("self.class.base = %\n", self.class.base);
        Print("self.class.name = %\n", self.class.name);

        self.receives_update = false;
    }

    func OnAdded(self : TestUIController, entity : EntityProxy)
    {
        self.entity = entity;
    }

    func OnRemoved(self : TestUIController)
    {
        self.entity = null;
    }

    func OnTick(self : TestUIController, delta : Float)
    {
        Print("Tick UI Component\n")
    }

    func OnEvent(self : TestUIController, event_type : Int, mouse_position : Vector2)
    {
        const entity_position : Vector3 = self.entity.GetTranslation();
        const aabb : BoundingBox = self.entity.GetWorldAABB();
        const min = aabb.GetMin();
        const max = aabb.GetMax();

        const center : Vector3 = (max + min) * new Vector3(0.5, 0.5, 0.5);

        if (event_type == UIEventType.MOUSE_DOWN) {
            self.click_position = new Vector2(mouse_position.GetX() - entity_position.GetX(), mouse_position.GetY() - entity_position.GetY());

            let ent : EntityProxy = engine::CreateEntity();
            ent.SetTranslation(new Vector3(0, 20, 0));
            Print("ent.GetWorldAABB() = %\n", ent.GetWorldAABB());

        } else if (event_type == UIEventType.MOUSE_UP) {
            self.click_position = new Vector2(0.0, 0.0);
        } else if (event_type == UIEventType.MOUSE_DRAG) {
            self.entity.SetTranslation(new Vector3(mouse_position.GetX() + self.click_position.GetX(), mouse_position.GetY() + self.click_position.GetY()/*(mouse_position.GetY() - (1.0 - self.click_position.GetY()))*/, 0.0));
        }

        Print("world AABB = %\n", self.entity.GetWorldAABB());
    }
};

export const controller = new TestUIController;
