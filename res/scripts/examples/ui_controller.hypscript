#importpath "../" "../library";

class TestClass<T>
{
    func TestFunc(self, a : T, b : T) -> T
    {
        return a + b;
    }

    func TestFunc2<T2>(self, a : T2, b : T2) -> Function
    {
        return func () {
            return a + b;
        };
    }
}

func TestFunc3<T>(a : T, b : T) -> T
{
    return a + b;
}

// func GetComponent<Component>(scene : Scene, entity : UInt) -> Component
// {
//     return scene.GetComponent(Component.native_type_id, entity);
// }
class FooComponent
{
    static native_type_id = 3432u;

    test_var : Float;
}

class SceneHelper
{
    static func GetComponent<Component>(self : Class, scene : Scene, entity : UInt) -> Component
    {
        Print("SceneHelper.GetComponent<Component>(entity) called with entity = % and Component = %\n", entity, Component);

        return scene.GetComponent(Component.native_type_id, entity);
    }
}

class TestScript
{
    TestScript(self : TestScript)
    {
    }

    func OnAdded(self : TestScript, scene : Scene, entity : UInt)
    {
        Print(Format("Test script added, self = %, scene = %, entity = %\n", self, scene.GetID(), entity));

        Print("Scene type ID = %\n", Scene.native_type_id);
        Print("scene.GetID() = %\n", scene.GetID());

        // Print("TestSceneFunction<T>() = %\n", TestSceneFunction<Foo>());

        Print("mock_scene.GetComponent<FooComponent>(entity) = %\n", SceneHelper.GetComponent<FooComponent>(scene, entity));

        // Print("GetComponent<FooComponent>(scene, entity) = %\n", scene.GetComponent<FooComponent>(entity));

        // fn := scene.GetComponent<Foo>;
        // Print("typeof(Scene.GetComponent<Foo>()) = %\n", fn());


        // Print("Scene.GetComponent<Foo>(entity) = %\n", scene.GetComponent<Foo>(entity));

        // scene.GetComponent<TransformComponent>(entity).SetTranslation(new Vec3f(0.0, 0.0, 0.0));s
        // scene.GetComponent(entity, "Transform").SetTranslation(new Vec3f(0.0, 0.0, 0.0));
    }

    func OnRemoved(self : TestScript)
    {
    }

    func OnTick(self : TestScript, delta : Float)
    {
        Print("Test script tick, self = %, delta = %\n", self, delta);
    }
}

export const controller = new TestScript();
