#importpath "../" "../library";

class TestGenericClass<T>
    test_field : T = 1.1515 as T
    static test_static_field : T = 1.1515 as T

    TestGenericClass(self: TestGenericClass)
        Print("TestGenericClass = %\n", TestGenericClass)
        Print("typeof self = %\n", typeof self)
        Print("TestGenericClass.test_static_field = %\n", TestGenericClass.test_static_field)
    end
end

class TestOtherClass
    static native_type_id : uint = 123u

    TestOtherClass(self: TestOtherClass)
        Print("TestOtherClass = %\n", self)
    end
end

class SceneHelper
    static GetComponent<T>(self: typeof SelfType, scene : Scene, entity : uint) -> T
        return scene.GetComponent(T.native_type_id, entity)
    end
end

class TestScript
    TestScript(self)
        Print("Test script constructor, self = %\n", self)
    end

    OnAdded(self: TestScript, scene : Scene, entity : uint)
        Print(Format("Test script added, self = %, scene = %, entity = %\n", self, scene.GetID(), entity))

        Print("new TestOtherClass = %\n", TestOtherClass())
        Print("new TestGenericClass = %\n", TestGenericClass<int>())
        Print("typeof(new TestGenericClass) = %\n", typeof(TestGenericClass<int>()))

        Print("GetComponent<TestOtherClass> = %\n", SceneHelper.GetComponent<TestOtherClass>(scene, entity))

        for (let i = 0; i < 100; i += 1)
            Print("i = %\n", i)
        end
    end

    OnRemoved(self)
    end

    OnTick(self, delta : float)
        Print("Test script tick, self = %, delta = %\n", self, delta);
    end
end

export const controller = new TestScript()