
#version 450

#extension GL_GOOGLE_include_directive : require

#define NUM_SAMPLES_X 16
#define NUM_SAMPLES_Y 16

struct SHTile
{
    vec4 coeffs_weights[9];
};

#if defined(MODE_BUILD_COEFFICIENTS) || defined(MODE_CLEAR)
layout(local_size_x = 1, local_size_y = NUM_SAMPLES_X, local_size_z = NUM_SAMPLES_Y) in;
#elif defined(MODE_REDUCE)
layout(local_size_x = 6, local_size_y = 4, local_size_z = 4) in;
#elif defined(MODE_FINALIZE)
layout(local_size_x = 1) in;
#endif

HYP_DESCRIPTOR_SAMPLER(Global, SamplerLinear) uniform sampler sampler_linear;
HYP_DESCRIPTOR_SAMPLER(Global, SamplerNearest) uniform sampler sampler_nearest;

#include "../include/defines.inc"
#include "../include/shared.inc"
#include "../include/tonemap.inc"

#define HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS
#include "../include/env_probe.inc"

HYP_DESCRIPTOR_CBUFF_DYNAMIC(Scene, EnvGridsBuffer, size = 4352) uniform EnvGridsBuffer { EnvGrid env_grid; };
HYP_DESCRIPTOR_SSBO(Scene, SHGridBuffer, size = 147456) buffer SHGridBuffer { vec4 sh_grid_buffer[SH_GRID_BUFFER_SIZE]; };
HYP_DESCRIPTOR_SRV(Scene, EnvProbeTextures, count = 16) uniform textureCube env_probe_textures[16];
HYP_DESCRIPTOR_SSBO(Scene, EnvProbesBuffer, size = 131072) readonly buffer EnvProbesBuffer { EnvProbe env_probes[HYP_MAX_ENV_PROBES]; };

HYP_DESCRIPTOR_SRV(ComputeSHDescriptorSet, InCubemap) uniform textureCube cubemap;
HYP_DESCRIPTOR_SSBO(ComputeSHDescriptorSet, InputSHTilesBuffer) buffer InputSHTilesBuffer { SHTile sh_tiles[]; };
HYP_DESCRIPTOR_SSBO(ComputeSHDescriptorSet, OutputSHTilesBuffer) buffer OutputSHTilesBuffer { SHTile sh_tiles_output[]; };

layout(push_constant) uniform PushConstant
{
    uvec4   probe_grid_position;
    uvec4   cubemap_dimensions;
    uvec4   level_dimensions;
};

#if defined(MODE_BUILD_COEFFICIENTS) || defined(MODE_CLEAR)
#define CURRENT_TILE sh_tiles[(face_index * NUM_SAMPLES_X * NUM_SAMPLES_Y) + (sample_index.x * NUM_SAMPLES_Y) + sample_index.y]
#endif

vec3 MapXYSToDirection(uint face_index, vec2 uv) {
    vec3 dir = vec3(0.0);

    float u = uv.x;
    float v = -uv.y;

    // +x, -x, +y, -y, +z, -z
    switch (face_index) {
    case 0:
        dir = normalize(vec3(1.0, v, -u));
        break;
    case 1:
        dir = normalize(vec3(-1.0, v, u));
        break;
    case 2:
        dir = normalize(vec3(u, 1.0, -v));
        break;
    case 3:
        dir = normalize(vec3(u, -1.0, v));
        break;
    case 4:
        dir = normalize(vec3(u, v, 1.0));
        break;
    case 5:
        dir = normalize(vec3(-u, v, -1.0));
        break;
    }

    return dir;
}

float AreaIntegral(float x, float y)
{
    return atan(x * y, sqrt(x * x + y * y + 1.0));
}

float TexelSolidAngle(vec2 uv)
{
    vec2 texel_size = vec2(1.0) / vec2(cubemap_dimensions.xy);

    float x0 = uv.x - texel_size.x;
    float y0 = uv.y - texel_size.y;
    float x1 = uv.x + texel_size.x;
    float y1 = uv.y + texel_size.y;

    return AreaIntegral(x0, y0) - AreaIntegral(x0, y1) - AreaIntegral(x1, y0) + AreaIntegral(x1, y1);
}

float[9] ProjectOntoSHBands(vec3 dir)
{
    float[9] sh;

    // Band 0
    sh[0] = 0.282095f;

    // Band 1
    sh[1] = 0.488603f * dir.y;
    sh[2] = 0.488603f * dir.z;
    sh[3] = 0.488603f * dir.x;

    // Band 2
    sh[4] = 1.092548f * dir.x * dir.y;
    sh[5] = 1.092548f * dir.y * dir.z;
    sh[6] = 0.315392f * (3.0f * dir.z * dir.z - 1.0f);
    sh[7] = 1.092548f * dir.x * dir.z;
    sh[8] = 0.546274f * (dir.x * dir.x - dir.y * dir.y);

    return sh;
}

float[27] ProjectOntoSH9Color(vec3 dir, vec3 color)
{
    float[9] bands = ProjectOntoSHBands(dir);
    
    float[27] sh_colors;

    for(uint i = 0; i < 9; ++i) {
        sh_colors[i * 3] = color.r * bands[i];
        sh_colors[i * 3 + 1] = color.g * bands[i];
        sh_colors[i * 3 + 2] = color.b * bands[i];
    }

    return sh_colors;
}

#ifdef MODE_REDUCE
// shared memory (per face) at the final reduce stage
shared vec4 shared_memory[9][6];
#endif

void main(void)
{
#ifdef MODE_CLEAR
    const int face_index = int(gl_GlobalInvocationID.x);

    if (face_index >= 6) {
        return;
    }

    const ivec2 sample_index = ivec2(gl_GlobalInvocationID.yz);

    for (int i = 0; i < 9; i++) {
        CURRENT_TILE.coeffs_weights[i] = vec4(0.0);

        sh_grid_buffer[min(probe_grid_position.w * 9 + i, SH_GRID_BUFFER_SIZE - 1)] = vec4(0.0);
    }
#elif defined(MODE_BUILD_COEFFICIENTS)
    const int face_index = int(gl_GlobalInvocationID.x);

    if (face_index >= 6) {
        return;
    }

    const ivec2 sample_index = ivec2(gl_GlobalInvocationID.yz);

    const ivec2 size_per_sample = ivec2(cubemap_dimensions.xy) / ivec2(NUM_SAMPLES_X, NUM_SAMPLES_Y);

    // middle of this part of the face
    const ivec2 sample_coord = ivec2(vec2(size_per_sample * sample_index) + (vec2(size_per_sample) * 0.5));

    const vec2 texel_size = vec2(1.0) / vec2(cubemap_dimensions.xy);

    // +0.5 to sample in the middle of the texel
    const vec2 uv = vec2((vec2(sample_coord) + 0.5) * texel_size);

    // [-1, 1] range
    const vec2 sample_point = uv * 2.0 - 1.0;
    
    const vec3 dir = MapXYSToDirection(face_index, sample_point);

    // vec4 environment_map_sample = TextureCube(sampler_linear, environment_maps[0], dir);
    vec4 cubemap_sample = TextureCube(sampler_linear, cubemap, dir);
    // cubemap_sample.rgb = pow(cubemap_sample.rgb, vec3(2.2));

    // vec4 combined_sample = environment_map_sample * (1.0 - cubemap_sample.a) + (vec4(cubemap_sample.rgb, 1.0) * cubemap_sample.a);

    float sh_values[27] = ProjectOntoSH9Color(dir, cubemap_sample.rgb);

    float temp = 1.0 + sample_point.x * sample_point.x + sample_point.y * sample_point.y;
    float weight = 4.0 / (sqrt(temp) * temp);
    
    // float weight = TexelSolidAngle(sample_point);

    for (int i = 0; i < 9; i++) {
        vec3 sh_color = vec3(
            sh_values[i * 3],
            sh_values[i * 3 + 1],
            sh_values[i * 3 + 2]
        );

        CURRENT_TILE.coeffs_weights[i] = vec4(sh_color * weight, weight);
    }
#elif defined(MODE_REDUCE)
    const int face_index = int(gl_GlobalInvocationID.x);

    if (face_index >= 6) {
        return;
    }

    const ivec2 input_index = ivec2(gl_GlobalInvocationID.yz * 2);
    const ivec2 output_index = ivec2(gl_GlobalInvocationID.yz);

    const ivec2 prev_dimensions = ivec2(level_dimensions.xy);
    const ivec2 next_dimensions = ivec2(level_dimensions.zw);

    if (any(greaterThanEqual(input_index, prev_dimensions))) {
        return;
    }

    if (any(greaterThanEqual(input_index + 1, prev_dimensions))) {
        return;
    }

    if (any(greaterThanEqual(output_index, next_dimensions))) {
        return;
    }


    // for (int i = 0; i < 9; i++) {
    //     sh_tiles_output[(face_index * next_dimensions.x * next_dimensions.y) + (output_index.x * next_dimensions.y) + output_index.y].coeffs_weights[i] =
    //         sh_tiles[(face_index * prev_dimensions.x * prev_dimensions.y) + (input_index.x * prev_dimensions.y) + input_index.y].coeffs_weights[i];
    // }

    for (int i = 0; i < 9; i++) {
        sh_tiles_output[(face_index * next_dimensions.x * next_dimensions.y) + (output_index.x * next_dimensions.y) + output_index.y].coeffs_weights[i] =
            sh_tiles[(face_index * prev_dimensions.x * prev_dimensions.y) + (input_index.x * prev_dimensions.y) + input_index.y].coeffs_weights[i]
            + sh_tiles[(face_index * prev_dimensions.x * prev_dimensions.y) + ((input_index.x + 1) * prev_dimensions.y) + input_index.y].coeffs_weights[i]
            + sh_tiles[(face_index * prev_dimensions.x * prev_dimensions.y) + ((input_index.x + 1) * prev_dimensions.y) + (input_index.y + 1)].coeffs_weights[i]
            + sh_tiles[(face_index * prev_dimensions.x * prev_dimensions.y) + (input_index.x * prev_dimensions.y) + (input_index.y + 1)].coeffs_weights[i];
    }
#elif defined(MODE_FINALIZE)
    for (int face_index = 0; face_index < 6; face_index++) {
        for (int i = 0; i < 9; i++) {
            sh_grid_buffer[min(probe_grid_position.w * 9 + i, SH_GRID_BUFFER_SIZE - 1)] += sh_tiles[face_index].coeffs_weights[i];
        }
    }

    for (int i = 0; i < 9; i++) {
        float weight = sh_grid_buffer[min(probe_grid_position.w * 9 + i, SH_GRID_BUFFER_SIZE - 1)].a;
    
        sh_grid_buffer[min(probe_grid_position.w * 9 + i, SH_GRID_BUFFER_SIZE - 1)] *= (4.0 * HYP_FMATH_PI) / max(weight, 0.0001);
    }
#endif
}
