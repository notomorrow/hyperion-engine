#version 450

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_nonuniform_qualifier : require

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

#include "../include/shared.inc"
#include "../include/defines.inc"

#define HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS
#include "../include/scene.inc"
#include "../include/object.inc"
#include "../include/packing.inc"
#undef HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS

#include "./Particle.glsl"

#define HYP_PARTICLE_NOISE_MAP_EXTENT 128
#define HYP_PARTICLE_NOISE_MAP_SIZE HYP_FMATH_SQR(HYP_PARTICLE_NOISE_MAP_EXTENT)

struct IndirectDrawCommand
{
    // VkDrawIndexedIndirectCommand
    uint index_count;
    uint instance_count;
    uint first_index;
    int vertex_offset;
    uint first_instance;
};

layout(set = 0, binding = 1) buffer IndirectDrawCommandsBuffer
{
    IndirectDrawCommand indirect_draw_command;
};

layout(set = 0, binding = 2) buffer NoiseBuffer
{
    float noise_values[HYP_PARTICLE_NOISE_MAP_SIZE];
};

layout(std140, set = 0, binding = 4, row_major) readonly buffer SceneShaderData
{
    Scene scene;
};

layout(std140, set = 0, binding = 5, row_major) uniform CameraShaderData
{
    Camera camera;
};

layout(set = 0, binding = 8) uniform sampler sampler_nearest;
layout(set = 0, binding = 9) uniform texture2D gbuffer_normals_texture;
layout(set = 0, binding = 10) uniform texture2D gbuffer_depth_texture;

layout(push_constant) uniform ParticleSpawnerData
{
    vec4 origin;
    float spawn_radius;
    float randomness;
    float avg_lifespan;
    uint max_particles;
    float max_particles_sqrt;
    float delta_time;
    uint global_counter;
} push_constants;

vec3 GetNoiseValue()
{
    const uint base_offset = gl_GlobalInvocationID.x * 3u;

    const uvec3 indices = uvec3(
        (push_constants.global_counter + base_offset) % HYP_PARTICLE_NOISE_MAP_SIZE,
        (push_constants.global_counter + base_offset + 1u) % HYP_PARTICLE_NOISE_MAP_SIZE,
        (push_constants.global_counter + base_offset + 2u) % HYP_PARTICLE_NOISE_MAP_SIZE
    );

    return vec3(noise_values[indices[0]], noise_values[indices[1]], noise_values[indices[2]]) * 2.0 - 1.0;
}

void main()
{
    const uint id = gl_GlobalInvocationID.x;
    const uint index = id;

    if (id >= push_constants.max_particles) {
        return;
    }

    float time = float(push_constants.global_counter) * push_constants.delta_time;

    ParticleShaderData particle = instances[index];

    vec3 next_position = particle.position.xyz + (particle.velocity.xyz * push_constants.delta_time);

    float has_gravity = 1.0;

    vec3 noise_value = GetNoiseValue();
    vec3 random_direction = normalize(noise_value);
    vec3 starting_velocity = random_direction;//vec3(1.0, 5.0, 1.0);// * (noise_value.y * push_constants.randomness);

    vec3 starting_position = push_constants.origin.xyz;

    vec2 position_index = vec2(mod(float(id), push_constants.max_particles_sqrt), float(id) / push_constants.max_particles_sqrt);
    starting_position += vec3(sin(position_index.x / float(push_constants.max_particles) * HYP_FMATH_PI), 0.0, cos(position_index.y / float(push_constants.max_particles) * HYP_FMATH_PI)) * push_constants.randomness * (noise_value.y * 0.5 + 0.5) * push_constants.spawn_radius;

    float starting_lifetime = push_constants.avg_lifespan;
    starting_lifetime += noise_value.z * push_constants.randomness * (push_constants.avg_lifespan * 0.5);

    float lifetime = particle.attributes.x;

    const float lifetime_ratio = clamp(lifetime / push_constants.avg_lifespan, 0.0, 1.0);

    const float current_scale = particle.position.a;
    const float final_scale = particle.velocity.a;
    const float starting_scale = push_constants.origin.a;//clamp(1.0 + (noise_value.z * push_constants.randomness), 0.01, 5.0);
    const float starting_final_scale = starting_scale * ((noise_value.y + 1.0) * push_constants.randomness);
    const float next_scale = mix(current_scale, final_scale, lifetime_ratio);

    // reset the particle if lifetime has expired
    float is_alive = step(0.0, lifetime);
    particle.position.xyz = mix(starting_position, next_position, is_alive);
    particle.position.a = mix(starting_scale, next_scale, is_alive);
    particle.velocity.xyz = mix(starting_velocity, particle.velocity.xyz - (vec3(0, 9.81, 0) * push_constants.delta_time * has_gravity), is_alive);
    particle.velocity.a = mix(starting_final_scale, final_scale, is_alive);
    
    lifetime = mix(starting_lifetime, lifetime - push_constants.delta_time, is_alive);
    particle.attributes.x = lifetime;

    const bool fade_alpha = true;
    const float alpha = mix(1.0, lifetime_ratio, float(fade_alpha));
    particle.color = mix(vec4(0.0), vec4(1.0, 1.0, 1.0, alpha), is_alive);

    // for depth-buffer based collisions:
    // get particle position in screen space,
    // sample the depth texture at that point,
    // convert to a world space position,
    // check distance between particle position and that world space position,
    // if within a certain threshold, then we have a collision.
    // if there is a collision, push the particle in the direction of the gbuffers' normal

#ifdef HAS_PHYSICS
    vec4 particle_position_ndc = camera.projection * camera.view * vec4(particle.position.xyz, 1.0);
    particle_position_ndc /= particle_position_ndc.w;

    vec2 particle_uv = particle_position_ndc.xy * 0.5 + 0.5;

    const float depth = Texture2D(sampler_nearest, gbuffer_depth_texture, particle_uv).r;

    vec4 position_world_space = ReconstructWorldSpacePositionFromDepth(inverse(camera.projection), inverse(camera.view), particle_uv, depth);
    position_world_space /= position_world_space.w;

    if (distance(position_world_space.xyz, particle.position.xyz) <= 1.0) {
        // has collision
        const vec3 normal = normalize(DecodeNormal(Texture2D(sampler_nearest, gbuffer_normals_texture, particle_uv)).xyz);

        particle.velocity.xyz = reflect(normal, normalize(particle.velocity.xyz));
    }
#endif

    instances[index] = particle;

    atomicAdd(indirect_draw_command.instance_count, 1u);//uint(is_alive));
}