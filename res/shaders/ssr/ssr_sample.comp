#version 450
#extension GL_GOOGLE_include_directive : require

#include "ssr_header.inc"

HYP_DESCRIPTOR_UAV(SSRDescriptorSet, UVImage, format = rgba16f) uniform readonly image2D ssr_uv_image;
HYP_DESCRIPTOR_UAV(SSRDescriptorSet, SampleImage, format = rgba16f) uniform writeonly image2D ssr_sample;
HYP_DESCRIPTOR_CBUFF(SSRDescriptorSet, SSRParams, size = 64) uniform SSRParamsBuffer
{
	uvec4 dimension;
	float ray_step;
	float num_iterations;
	float max_ray_distance;
	float distance_bias;
	float offset;
	float eye_fade_start;
	float eye_fade_end;
	float screen_edge_fade_start;
	float screen_edge_fade_end;
} ssr_params;

HYP_DESCRIPTOR_SRV(Global, GBufferTextures, count = 8) uniform texture2D gbuffer_textures[8];
HYP_DESCRIPTOR_SRV(Global, GBufferMipChain) uniform texture2D gbuffer_mip_chain;
HYP_DESCRIPTOR_SRV(Global, GBufferDepthTexture) uniform texture2D gbuffer_depth_texture;
HYP_DESCRIPTOR_SAMPLER(Global, SamplerNearest) uniform sampler sampler_nearest;
HYP_DESCRIPTOR_SAMPLER(Global, SamplerLinear) uniform sampler sampler_linear;
HYP_DESCRIPTOR_SSBO(Global, BlueNoiseBuffer, size = 1310720) readonly buffer BlueNoiseBuffer
{
	ivec4 sobol_256spp_256d[256 * 256 / 4];
	ivec4 scrambling_tile[128 * 128 * 8 / 4];
	ivec4 ranking_tile[128 * 128 * 8 / 4];
};

HYP_DESCRIPTOR_SSBO_DYNAMIC(Scene, ScenesBuffer, size = 256) readonly buffer SceneBuffer
{
    Scene scene;
};

HYP_DESCRIPTOR_CBUFF_DYNAMIC(Scene, CamerasBuffer, size = 512) uniform CameraShaderData
{
    Camera camera;
};

#include "../include/noise.inc"
#include "../include/shared.inc"
#include "../include/tonemap.inc"

#define HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS
#include "../include/gbuffer.inc"
#undef HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS

float IsoscelesTriangleOpposite(float adjacent_length, float cone_theta)
{
    return 2.0 * tan(cone_theta) * adjacent_length;
}

float IsoscelesTriangleInRadius(float a, float h)
{
    float a2 = a * a;
    float fh2 = 4.0 * h * h;

    return (a * (sqrt(a2 + fh2) - a)) / (4.0 * h);
}

float IsoscelesTriangleNextAdjacent(float adjacent_length, float incircle_radius)
{
    // subtract the diameter of the incircle to get the adjacent side of the next level on the cone
    return adjacent_length - (incircle_radius * 2.0);
}

void main(void)
{
    const uint pixel_index = (gl_GlobalInvocationID.x * 2) + (scene.frame_counter & 1);
    const uvec2 coord = uvec2(
        pixel_index % ssr_params.dimension.x,
        pixel_index / ssr_params.dimension.x
    );

    if (any(greaterThanEqual(coord, ssr_params.dimension.xy))) {
        return;
    }

    const vec2 ssr_image_dimensions = vec2(ssr_params.dimension.xy);

    const vec2 texcoord = (vec2(coord) + vec2(0.5)) / ssr_image_dimensions;

    vec4 uv_sample = imageLoad(ssr_uv_image, ivec2(coord));
    const vec2 uv = uv_sample.xy;
    const float alpha = uv_sample.w;

    vec4 reflection_sample = vec4(0.0);
    float roughness = 0.0;

    float depth = Texture2D(sampler_nearest, gbuffer_depth_texture, texcoord).r;

    if (depth > 0.9995) {
        imageStore(ssr_sample, ivec2(coord), vec4(0.0));
        return;
    }

    vec3 P = ReconstructWorldSpacePositionFromDepth(inverse(camera.projection), inverse(camera.view), texcoord, depth).xyz;
    vec3 N = DecodeNormal(Texture2D(sampler_nearest, gbuffer_normals_texture, texcoord));
    vec3 V = normalize(camera.position.xyz - P);

    if (alpha > HYP_FMATH_EPSILON) {
        roughness = Texture2D(sampler_nearest, gbuffer_material_texture, texcoord).r;
        roughness = clamp(roughness, 0.001, 0.999);
        const float perceptual_roughness = sqrt(roughness);

        const float gloss = 1.0 - roughness;
        const float cone_angle = RoughnessToConeAngle(roughness) * 0.5;

        const float trace_size = float(max(ssr_params.dimension.x, ssr_params.dimension.y));
        const float max_mip_level = 9.0;

        vec2 sample_texcoord = texcoord;//+ (offset * filter_size);
        ivec2 sample_coord = ivec2(sample_texcoord * vec2(ssr_params.dimension.xy));
        const vec4 hit_data = imageLoad(ssr_uv_image, sample_coord);
        const vec2 hit_uv = hit_data.xy;
        const float hit_mask = hit_data.w;
        const vec2 delta_p = (hit_uv - texcoord);

        float adjacent_length = length(delta_p);
        vec2 adjacent_unit = normalize(delta_p);

        float remaining_alpha = 1.0;
        float gloss_multiplier = gloss;

        vec4 accum_color = vec4(0.0);

#ifdef CONE_TRACING
        for (int i = 0; i < 14; i++) {
            const float opposite_length = IsoscelesTriangleOpposite(adjacent_length, cone_angle);
            const float incircle_size = IsoscelesTriangleInRadius(opposite_length, adjacent_length);
            const vec2 sample_position = texcoord + adjacent_unit * (adjacent_length - incircle_size);

            const float mip_level = clamp(log2(/*current_radius*/ incircle_size * max(ssr_image_dimensions.x, ssr_image_dimensions.y)), 0.0, max_mip_level);
#else
            const float current_radius = length((hit_uv - texcoord) * vec2(ssr_params.dimension.xy)) * tan(cone_angle);
            const float mip_level = clamp(log2(current_radius), 0.0, max_mip_level);
#endif

            vec4 current_reflection_sample = Texture2DLod(sampler_linear, gbuffer_mip_chain, hit_uv, mip_level);

#ifdef CONE_TRACING
            current_reflection_sample.rgb *= vec3(gloss_multiplier);
            current_reflection_sample.a = gloss_multiplier;

            remaining_alpha -= current_reflection_sample.a;

            if (remaining_alpha < 0.0) {
                current_reflection_sample.rgb *= (1.0 - abs(remaining_alpha));
            }

            accum_color += current_reflection_sample;

            if (accum_color.a >= 1.0) {
                break;
            }

            adjacent_length = IsoscelesTriangleNextAdjacent(adjacent_length, incircle_size);
            gloss_multiplier *= gloss;
        }
#else
        accum_color = current_reflection_sample;
#endif

        reflection_sample = accum_color;

        reflection_sample.a *= alpha;
    }


// #ifdef OUTPUT_RGBA8
    // reflection_sample.rgb = TonemapReinhardSimple(reflection_sample.rgb);
    // imageStore(ssr_sample, ivec2(coord), vec4(pow(reflection_sample.rgb, vec3(1.0 / 2.2)), reflection_sample.a));
// #else
    imageStore(ssr_sample, ivec2(coord), vec4(reflection_sample));
// #endif
}
