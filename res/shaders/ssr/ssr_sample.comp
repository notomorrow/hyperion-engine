#version 450
#extension GL_GOOGLE_include_directive : require

#include "ssr_header.inc"
#include "../include/noise.inc"
#include "../include/shared.inc"
#include "../include/tonemap.inc"

layout(set = 0, binding = 0, UV_FORMAT) uniform readonly image2D ssr_uv_image;
layout(set = 0, binding = 1, rgba16f) uniform writeonly image2D ssr_sample;
layout(set = 0, binding = 2, r8) uniform writeonly image2D ssr_radius;

float IsoscelesTriangleOpposite(float adjacent_length, float cone_theta)
{
    return 2.0 * tan(cone_theta) * adjacent_length;
}

float IsoscelesTriangleInRadius(float a, float h)
{
    float a2 = a * a;
    float fh2 = 4.0 * h * h;

    return (a * (sqrt(a2 + fh2) - a)) / (4.0 * h);
}

float IsoscelesTriangleNextAdjacent(float adjacent_length, float incircle_radius)
{
    // subtract the diameter of the incircle to get the adjacent side of the next level on the cone
    return adjacent_length - (incircle_radius * 2.0);
}

void main(void)
{
    const uvec2 coord = uvec2(gl_GlobalInvocationID.xy * 2) + uvec2(scene.frame_counter & 1u);

    if (any(greaterThanEqual(coord, ssr_params.dimension.xy))) {
        return;
    }

    const vec2 ssr_image_dimensions = vec2(ssr_params.dimension.xy);

	vec2 texcoord = saturate((vec2(coord) + 0.5) / ssr_image_dimensions);

    vec4 uv_sample = imageLoad(ssr_uv_image, ivec2(coord));
    const vec2 uv = uv_sample.xy;
    const float alpha = uv_sample.w;

    vec4 reflection_sample = vec4(0.0);
    float roughness = 0.0;
    float out_radius = 0.0;
    float accum_radius = 0.0;

    float depth = SampleDepth(texcoord);

    if (depth > 0.9995) {
        // TODO: Sky texture sample here.
        imageStore(ssr_sample, ivec2(coord), vec4(0.0));
        imageStore(ssr_radius, ivec2(coord), vec4(0.0));
        return;
    }

    vec3 P = ReconstructWorldSpacePositionFromDepth(inverse(camera.projection), inverse(camera.view), texcoord, depth).xyz;
    vec3 N = DecodeNormal(Texture2D(sampler_nearest, gbuffer_normals_texture, texcoord));
    vec3 V = normalize(camera.position.xyz - P);

    if (alpha > HYP_FMATH_EPSILON) {
        roughness = Texture2D(sampler_nearest, gbuffer_material_texture, texcoord).r;
        roughness = clamp(roughness, 0.001, 0.999);
        const float perceptual_roughness = sqrt(roughness);

        const float gloss = 1.0 - roughness;
        const float cone_angle = RoughnessToConeAngle(roughness) * 0.5;

        const float trace_size = float(max(ssr_params.dimension.x, ssr_params.dimension.y));
        const float max_mip_level = 9.0;

        vec2 sample_texcoord = texcoord;//+ (offset * filter_size);
        ivec2 sample_coord = ivec2(sample_texcoord * vec2(ssr_params.dimension.xy));
        const vec4 hit_data = imageLoad(ssr_uv_image, sample_coord);
        const vec2 hit_uv = hit_data.xy;
        const float hit_mask = hit_data.w;
        const vec2 delta_p = (hit_uv - texcoord);

        float adjacent_length = length(delta_p);
        vec2 adjacent_unit = normalize(delta_p);

        float remaining_alpha = 1.0;
        float gloss_multiplier = gloss;

        vec4 accum_color = vec4(0.0);

#ifdef CONE_TRACING
        for (int i = 0; i < 14; i++) {
            const float opposite_length = IsoscelesTriangleOpposite(adjacent_length, cone_angle);
            const float incircle_size = IsoscelesTriangleInRadius(opposite_length, adjacent_length);
            const vec2 sample_position = texcoord + adjacent_unit * (adjacent_length - incircle_size);

            const float mip_level = clamp(log2(/*current_radius*/ incircle_size * max(ssr_image_dimensions.x, ssr_image_dimensions.y)), 0.0, max_mip_level);
#else
            const float current_radius = length((hit_uv - texcoord) * vec2(ssr_params.dimension.xy)) * tan(cone_angle);
            const float mip_level = clamp(log2(current_radius), 0.0, max_mip_level);
#endif

            vec4 current_reflection_sample = Texture2DLod(sampler_linear, gbuffer_mip_chain, hit_uv, mip_level);

#ifdef CONE_TRACING
            current_reflection_sample.rgb *= vec3(gloss_multiplier);
            current_reflection_sample.a = gloss_multiplier;

            remaining_alpha -= current_reflection_sample.a;

            if (remaining_alpha < 0.0) {
                current_reflection_sample.rgb *= (1.0 - abs(remaining_alpha));
            }

            accum_color += current_reflection_sample;

            if (accum_color.a >= 1.0) {
                break;
            }

            adjacent_length = IsoscelesTriangleNextAdjacent(adjacent_length, incircle_size);
            gloss_multiplier *= gloss;
            accum_radius += incircle_size;
        }

        accum_radius /= 14.0;
#else
        accum_color = current_reflection_sample;
#endif

        reflection_sample = accum_color;

        reflection_sample.a *= alpha;
    }

    out_radius = accum_radius;


// #ifdef OUTPUT_RGBA8
    // reflection_sample.rgb = TonemapReinhardSimple(reflection_sample.rgb);
    // imageStore(ssr_sample, ivec2(coord), vec4(pow(reflection_sample.rgb, vec3(1.0 / 2.2)), reflection_sample.a));
// #else
    imageStore(ssr_sample, ivec2(coord), vec4(reflection_sample));
// #endif

    imageStore(ssr_radius, ivec2(coord), vec4(out_radius / 255.0));
}
