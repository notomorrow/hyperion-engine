
#version 450

#extension GL_GOOGLE_include_directive : require

#define WORKGROUP_SIZE 8

layout(local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE) in;

#define HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS

#define HYP_SAMPLER_NEAREST sampler_nearest
#define HYP_SAMPLER_LINEAR sampler_linear

#include "../include/defines.inc"
#include "../include/shared.inc"
#include "../include/noise.inc"
#include "../include/packing.inc"
#include "../include/env_probe.inc"
#include "../include/scene.inc"
#include "../include/Octahedron.glsl"
#include "../include/brdf.inc"

HYP_DESCRIPTOR_CBUFF(Global, SphereSamplesBuffer) uniform SphereSamplesBuffer
{
    vec4 sphere_samples[4096];
};

HYP_DESCRIPTOR_SRV(ConvolveProbeDescriptorSet, ColorTexture) uniform textureCube color_texture;
HYP_DESCRIPTOR_SRV(ConvolveProbeDescriptorSet, NormalsTexture) uniform textureCube normals_texture;
HYP_DESCRIPTOR_SRV(ConvolveProbeDescriptorSet, MomentsTexture) uniform textureCube depth_texture;

HYP_DESCRIPTOR_SAMPLER(ConvolveProbeDescriptorSet, SamplerLinear) uniform sampler sampler_linear;
HYP_DESCRIPTOR_SAMPLER(ConvolveProbeDescriptorSet, SamplerNearest) uniform sampler sampler_nearest;

HYP_DESCRIPTOR_UAV(ConvolveProbeDescriptorSet, OutImage, format = rgba16f) uniform image2D out_image;

HYP_DESCRIPTOR_CBUFF(ConvolveProbeDescriptorSet, UniformBuffer) uniform UniformBuffer
{
    uvec2   out_image_dimensions;
    vec4    world_position;
    uint    num_bound_lights;
    uvec4   light_indices[4];
};

HYP_DESCRIPTOR_SRV(Global, EnvProbeTextures, count = 16) uniform texture2D env_probe_textures[16];
HYP_DESCRIPTOR_SSBO_DYNAMIC(Global, CurrentEnvProbe) readonly buffer CurrentEnvProbe { EnvProbe current_env_probe; };

HYP_DESCRIPTOR_SSBO(Global, LightsBuffer) readonly buffer LightsBuffer { Light lights[]; };
HYP_DESCRIPTOR_SSBO(Global, ShadowMapsBuffer) readonly buffer ShadowMapsBuffer { ShadowMap shadow_map_data[]; };
HYP_DESCRIPTOR_SRV(Global, ShadowMapsTextureArray) uniform texture2DArray shadow_maps;
HYP_DESCRIPTOR_SRV(Global, PointLightShadowMapsTextureArray) uniform textureCubeArray point_shadow_maps;

#include "../include/shadows.inc"
#include "../include/Octahedron.glsl"

vec2 NormalizeOctahedralCoord(uvec2 local_coord)
{
    return (vec2(local_coord) + vec2(0.5)) * (vec2(2.0) / vec2(out_image_dimensions)) - vec2(1.0);
}

vec4 SampleSky(vec3 dir)
{
    if (current_env_probe.texture_index != ~0u) {
        uint probe_texture_index = max(0, min(current_env_probe.texture_index, HYP_MAX_BOUND_REFLECTION_PROBES - 1));

        return Texture2D(sampler_linear, env_probe_textures[probe_texture_index], EncodeOctahedralCoord(normalize(dir)) * 0.5 + 0.5);
    }

    return vec4(0.0);
}

vec4 CalculateDirectLighting(uint light_index, in vec4 albedo, in vec3 P, in vec3 N, in vec3 V)
{
    if (lights[light_index].type != HYP_LIGHT_TYPE_DIRECTIONAL) {
        return vec4(0.0);
    }

    const vec4 light_color = vec4(UINT_TO_VEC4(lights[light_index].color_encoded).rgb, 1.0);

    vec3 L = normalize(lights[light_index].position_intensity.xyz);

    float NdotL = max(0.0001, dot(N, L));

    float shadow = 1.0;

    if (lights[light_index].type == HYP_LIGHT_TYPE_DIRECTIONAL && lights[light_index].shadow_map_index != ~0u) {
        shadow = GetShadowStandard(lights[light_index].shadow_map_index, P, vec2(0.0), NdotL);
    }

    return vec4((light_color * NdotL * shadow * lights[light_index].position_intensity.w).rgb, 1.0);
}

vec4 ConvolveProbe(uvec2 local_coord)
{
#if defined(MODE_IRRADIANCE)
    const int num_samples = 128;
    const float lobe_size = 0.98;
#else
    const int num_samples = 1;
#endif

    const vec2 oct_coord = NormalizeOctahedralCoord(local_coord);
    const vec3 dir = normalize(DecodeOctahedralCoord(oct_coord));

    vec4 sum_radiance = vec4(0.0);

    uint seed = uint(gl_GlobalInvocationID.x) * uint(gl_GlobalInvocationID.y);

    for (int i = 0; i < num_samples; i++) {
#if defined(MODE_IRRADIANCE)
        vec3 offset = sphere_samples[i % 4096].xyz;
        vec3 sample_dir = normalize(dir + vec3(lobe_size) * offset);
#else
        vec3 sample_dir = dir;
#endif

        // Non-accurate lighting calculation for simplicity

        vec4 albedo = TextureCube(sampler_linear, color_texture, sample_dir);
        vec3 normal = normalize(UnpackNormalVec2(TextureCube(sampler_nearest, normals_texture, sample_dir).rg));
        vec2 dist_dist2 = TextureCube(sampler_linear, depth_texture, sample_dir).rg;
        vec4 position = vec4(world_position.xyz + sample_dir * dist_dist2.r, 1.0);

#ifdef LIGHTING
        // Sample the sky in the direction of the normal to get a rough approximation of indirect lighting.
        vec3 rnd = vec3(RandomFloat(seed), RandomFloat(seed), RandomFloat(seed));
        vec3 irradiance_dir = RandomInHemisphere(rnd, normal);

        vec4 irradiance = SampleSky(irradiance_dir) * albedo * 0.25;

        vec4 radiance = vec4(0.0);
        
        for (uint j = 0; j < num_bound_lights; j++) {
            uint light_index = light_indices[j / 4][j % 4];

            radiance += CalculateDirectLighting(light_index, albedo, position.xyz, normal, -sample_dir);
        }

        vec4 color = irradiance + radiance * albedo;
#else
        vec4 color = albedo;
#endif

        sum_radiance += color;
    }

#if defined(MODE_IRRADIANCE)
    return sum_radiance / float(num_samples);
#else
    return sum_radiance;
#endif
}

void main(void)
{
    if (any(greaterThanEqual(gl_GlobalInvocationID.xy, out_image_dimensions))) {
        return;
    }

    const uvec2 coord = gl_GlobalInvocationID.xy;
    
    vec4 color = ConvolveProbe(coord);

    imageStore(out_image, ivec2(coord), color);
}