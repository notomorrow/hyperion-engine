#version 450

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_nonuniform_qualifier : require

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#include "include/defines.inc"
#include "include/shared.inc"

#define HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS
#include "include/scene.inc"
#undef HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS

layout(set = 0, binding = 0) uniform texture2D color_texture;
layout(set = 0, binding = 1) uniform texture2D prev_color_texture;
layout(set = 0, binding = 2) uniform texture2D velocity_texture;
layout(set = 0, binding = 3) uniform texture2D depth_texture;
layout(set = 0, binding = 4) uniform sampler sampler_linear;
layout(set = 0, binding = 5) uniform sampler sampler_nearest;
layout(set = 0, binding = 6, rgba16f) writeonly uniform image2D output_image;

layout(push_constant) uniform PushConstants
{
    uvec2 dimensions;
    uvec2 depth_texture_dimensions;
    vec2 camera_near_far;
};

// #define ADJUST_COLOR_HDR

#include "include/Temporal.glsl"

void main()
{
    const uvec2 pixel_coord = gl_GlobalInvocationID.xy;
    
    if (any(greaterThanEqual(pixel_coord, dimensions))) {
        return;
    }

    const vec2 uv = (vec2(pixel_coord) + 0.5) / vec2(dimensions);

    const vec2 texel_size = vec2(1.0) / vec2(dimensions);
    const vec2 depth_texel_size = vec2(1.0) / vec2(depth_texture_dimensions);

    // const vec3 closest_fragment = ClosestFragment(depth_texture, uv, depth_texel_size);
    // vec2 velocity = Texture2D(sampler_nearest, velocity_texture, closest_fragment.xy).rg;

    vec2 velocity;
    float view_space_depth;

    InitTemporalParams(
        depth_texture,
        velocity_texture,
        depth_texture_dimensions,
        uv,
        camera_near_far.x,
        camera_near_far.y,
        velocity,
        view_space_depth
    );

    // vec4 result = TemporalResolve(color_texture, prev_color_texture, uv, velocity, texel_size, view_space_depth);
    vec4 result = TemporalBlendRounded(
        color_texture,
        prev_color_texture,
        uv,
        velocity,
        texel_size,
        view_space_depth
    );

#if 0

    vec4 color = Texture2D(sampler_nearest, color_texture, uv);
    vec4 previous_color = Texture2D(sampler_linear, prev_color_texture, uv - velocity);
    vec4 color_ycocg = AdjustColorIn(RGBToYCoCg(color));
    vec4 previous_color_ycocg = RGBToYCoCg(previous_color);
    // previous_color = ClampColor_3x3(input_texture, previous_color, uv, texel_size);
    vec4 mean = color_ycocg;
    vec4 stddev = mean * mean;

    const vec2 offsets[4] = vec2[](
        vec2(-1.0, 0.0),
        vec2(1.0, 0.0),
        vec2(0.0, -1.0),
        vec2(0.0, 1.0)
    );

    for (int i = 0; i < 4; i++) {
        vec4 c = RGBToYCoCg(Texture2D(sampler_nearest, color_texture, clamp(uv + (offsets[i] * texel_size), 0.0, 1.0)));
        mean += c;
        stddev += c * c;
    }

    mean /= 5.0;
    stddev = sqrt(stddev / 5.0 - (mean * mean));

    vec4 clipped = ClipToAABB(color_ycocg, previous_color_ycocg, mean, stddev);
    // const float lum0 = RGBToYCoCg(color).r;
    // const float lum1 = clipped.r;
    vec4 result = TemporalLuminanceResolve(color, YCoCgToRGB(clipped));

#endif

    result = any(isnan(result)) ? vec4(1.0, 0.0, 0.0, 1.0) : result;

    imageStore(output_image, clamp(ivec2(pixel_coord), ivec2(0.0), ivec2(dimensions - 1)), result);
}