#version 450

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_nonuniform_qualifier : require

layout(local_size_x = 256) in;

#include "../include/defines.inc"
#include "../include/shared.inc"
#include "../include/aabb.inc"
#include "./shared.inc"

HYP_DESCRIPTOR_SAMPLER(Global, SamplerNearest) uniform sampler depth_pyramid_sampler;
HYP_DESCRIPTOR_SRV(View, DepthPyramidResult) uniform texture2D depth_pyramid;

#define HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS
#include "../include/object.inc"
#include "../include/scene.inc"
#undef HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS

HYP_DESCRIPTOR_CBUFF_DYNAMIC(Global, CamerasBuffer) uniform CamerasBuffer
{
    Camera camera;
};

HYP_DESCRIPTOR_SSBO(Global, ObjectsBuffer) readonly buffer ObjectsBuffer
{
    Object entities[];
};

HYP_DESCRIPTOR_CBUFF(Global, WorldsBuffer) uniform WorldsBuffer
{
    WorldShaderData world_shader_data;
};

struct IndirectDrawCommand
{
    // VkDrawIndexedIndirectCommand
    uint index_count;
    uint instance_count;
    uint first_index;
    int vertex_offset;
    uint first_instance;
};

struct ObjectInstance
{
    uint meshEntityBinding;
    uint draw_command_index;
    uint batch_index;
    uint _pad;
};

HYP_DESCRIPTOR_SSBO(ObjectVisibilityDescriptorSet, ObjectInstancesBuffer) readonly buffer InstancesBuffer
{
    ObjectInstance instances[];
};

HYP_DESCRIPTOR_SSBO(ObjectVisibilityDescriptorSet, IndirectDrawCommandsBuffer, standard = scalar) buffer IndirectDrawCommandsBuffer
{
    IndirectDrawCommand indirect_draw_commands[];
};

HYP_DESCRIPTOR_SSBO(ObjectVisibilityDescriptorSet, EntityInstanceBatchesBuffer) buffer EntityInstanceBatchesBuffer
{
    uvec4 entityInstanceBatchDataRaw[];
};

layout(push_constant) uniform ObjectVisibilityData
{
    uvec2 depth_pyramid_dimensions;
    uint batch_offset;
    uint num_instances;
    uint batch_stride;
}
push_constants;

// uint GetObjectBucket(ObjectInstance object_instance)
// {
//     return object_instance.packed_data & 0xFF;
// }

bool IsPixelVisible(vec3 clip_min, vec3 clip_max)
{
    vec2 dim = (clip_max.xy - clip_min.xy) * 0.5 * vec2(push_constants.depth_pyramid_dimensions);

    return max(dim.x, dim.y) < 16.0;
}

float GetDepthAtTexel(vec2 texcoord, int mip)
{
    ivec2 mip_dimensions = textureSize(sampler2D(depth_pyramid, depth_pyramid_sampler), mip);
    vec4 value = Texture2DTexelLod(depth_pyramid_sampler, depth_pyramid, clamp(ivec2(texcoord * mip_dimensions), ivec2(0), mip_dimensions - ivec2(1)), mip);

    return value.r;
}

void main()
{
    const uint id = gl_GlobalInvocationID.x;
    const uint index = id; // push_constants.batch_offset + id;

    if (id >= push_constants.num_instances)
    {
        return;
    }

    ObjectInstance object_instance = instances[index];
    const uint meshEntityBinding = object_instance.meshEntityBinding;
    const uint draw_command_index = object_instance.draw_command_index;

    if (meshEntityBinding == ~0u)
    {
        return;
    }

    Object entity = entities[meshEntityBinding];

    bool is_visible = false;

    AABB aabb;
    aabb.max = entity.world_aabb_max.xyz;
    aabb.min = entity.world_aabb_min.xyz;

    uint cull_bits = 0x7F;
    bool skip_check = bool(GET_OBJECT_BUCKET(entity) & (OBJECT_MASK_SKY | OBJECT_MASK_UI));

    is_visible = skip_check;

    if (!skip_check)
    {
        mat4 view = camera.view;
        mat4 proj = camera.projection;

        vec4 clip_pos = vec4(0.0);
        vec3 clip_min = vec3(1.0, 1.0, 1.0);
        vec3 clip_max = vec3(-1.0, -1.0, 0.0);

        // transform worldspace aabb to screenspace
        for (int i = 0; i < 8; i++)
        {
            vec4 projected_corner = proj * view * vec4(AABBGetCorner(aabb, i), 1.0);
            cull_bits &= GetCullBits(projected_corner);

            clip_pos = projected_corner;
            clip_pos.z = max(clip_pos.z, 0.0);
            clip_pos.xyz /= clip_pos.w;
            clip_pos.xy = clamp(clip_pos.xy, -1.0, 1.0);

            clip_min = min(clip_pos.xyz, clip_min);
            clip_max = max(clip_pos.xyz, clip_max);
        }

        if (cull_bits == 0)
        {
            clip_min.xy = clip_min.xy * vec2(0.5) + vec2(0.5);
            clip_max.xy = clip_max.xy * vec2(0.5) + vec2(0.5);

            vec2 dimensions = vec2(push_constants.depth_pyramid_dimensions);

            // Calculate hi-Z buffer mip
            vec2 size = (clip_max.xy - clip_min.xy) * max(dimensions.x, dimensions.y);
            int mip = int(ceil(log2(max(size.x, size.y))));

            vec2 sample_coord = (clip_min.xy + clip_max.xy) * 0.5;

            const vec4 depths = {
                GetDepthAtTexel(clip_min.xy, mip).r,
                GetDepthAtTexel(vec2(clip_max.x, clip_min.y), mip).r,
                GetDepthAtTexel(vec2(clip_min.x, clip_max.y), mip).r,
                GetDepthAtTexel(clip_max.xy, mip).r
            };

            // //find the max depth
            float max_depth = max(max(max(depths.x, depths.y), depths.z), depths.w);
            is_visible = (clip_min.z <= max_depth + 0.001);
        }
    }

    if (is_visible)
    {
        const uint instance_index = atomicAdd(indirect_draw_commands[draw_command_index].instance_count, 1u);

        if (object_instance.batch_index != ~0u && instance_index < MAX_ENTITIES_PER_INSTANCE_BATCH)
        {
            uint bufferOffsetWords = object_instance.batch_index * push_constants.batch_stride / 4;
            // `indices` member of EntityInstanceBatch has offset of 16 bytes (4 words)
            uint indicesOffsetWords = bufferOffsetWords + 4 + instance_index;

            atomicExchange(entityInstanceBatchDataRaw[indicesOffsetWords >> 2][indicesOffsetWords & 3], meshEntityBinding);
        }
    }
}