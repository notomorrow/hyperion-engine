#version 450

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_nonuniform_qualifier : require

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

#include "../include/shared.inc"

HYP_DESCRIPTOR_SAMPLER(Global, SamplerLinear) uniform sampler voxel_map_sampler;

HYP_DESCRIPTOR_SRV(GenerateMipmapDescriptorSet, InputTexture) uniform texture3D mip_in;
HYP_DESCRIPTOR_UAV(GenerateMipmapDescriptorSet, OutputTexture, format = rgba8) uniform writeonly image3D mip_out;

layout(push_constant) uniform VoxelMipData
{
    uvec4 mip_dimensions;
    uvec4 prev_mip_dimensions;
    uint mip_level;
};

vec4 GetVoxelAtTexel(vec3 texcoord)
{
    return Texture3DLod(voxel_map_sampler, mip_in, texcoord, 0.0);

    // const ivec3 texel_position = clamp(ivec3(texcoord * vec3(mip_dimensions.xyz) - 0.5), ivec3(0), ivec3(mip_dimensions.xyz) - 1);


    // ivec3 offset_coord = texel_position + offset;

    // return Texture3DTexel(voxel_map_sampler, mip_in, offset_coord);
}

void main()
{
    const uvec3 coord = gl_GlobalInvocationID.xyz;

    if (any(greaterThanEqual(coord, mip_dimensions.xyz))) {
        return;
    }

    const vec3 texcoord = (vec3(coord) + 0.5) / vec3(mip_dimensions.xyz);

    vec4 color = GetVoxelAtTexel(texcoord);
    vec4 final_color = color;

    imageStore(mip_out, clamp(ivec3(coord), ivec3(0), ivec3(mip_dimensions.xyz) - ivec3(1)), final_color);
}
