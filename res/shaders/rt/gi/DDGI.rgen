#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_scalar_block_layout : enable

#define DDGI

#include "../../include/defines.inc"
#include "../../include/noise.inc"
#include "../../include/packing.inc"

HYP_DESCRIPTOR_SAMPLER(Global, SamplerNearest) uniform sampler sampler_nearest;
HYP_DESCRIPTOR_SAMPLER(Global, SamplerLinear) uniform sampler sampler_linear;

#define texture_sampler sampler_linear
#define HYP_SAMPLER_NEAREST sampler_nearest
#define HYP_SAMPLER_LINEAR sampler_linear

#define HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS

#include "../../include/scene.inc"
#include "../../include/shared.inc"
#include "../../include/noise.inc"
#include "../../include/env_probe.inc"
#include "../../include/Octahedron.glsl"

#undef HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS

#include "../../include/rt/payload.inc"
#include "../../include/rt/probe/probe_uniforms.inc"

HYP_DESCRIPTOR_ACCELERATION_STRUCTURE(DDGIDescriptorSet, TLAS) uniform accelerationStructureEXT tlas;

HYP_DESCRIPTOR_CBUFF(DDGIDescriptorSet, DDGIUniforms) uniform DDGIUniformBuffer
{
    DDGIUniforms probe_system;
};

HYP_DESCRIPTOR_SSBO(DDGIDescriptorSet, ProbeRayData) buffer ProbeRayDataBuffer
{
    ProbeRayData probe_rays[];
};

HYP_DESCRIPTOR_SSBO(Global, LightsBuffer) readonly buffer LightsBuffer
{
    Light lights[];
};

#include "../../include/rt/probe/shared.inc"

HYP_DESCRIPTOR_CBUFF(Global, WorldsBuffer) uniform WorldsBuffer
{
    WorldShaderData world_shader_data;
};

HYP_DESCRIPTOR_SRV(Global, EnvProbeTextures, count = 16) uniform texture2D env_probe_textures[16];
HYP_DESCRIPTOR_SSBO(Global, EnvProbesBuffer) readonly buffer EnvProbesBuffer { EnvProbe env_probes[]; };
HYP_DESCRIPTOR_CBUFF_DYNAMIC(Global, EnvGridsBuffer) uniform EnvGridsBuffer { EnvGrid env_grid; };
HYP_DESCRIPTOR_SSBO_DYNAMIC(Global, CurrentEnvProbe) readonly buffer CurrentEnvProbe { EnvProbe current_env_probe; };

layout(location = 0) rayPayloadEXT RayPayload payload;

#define HYP_GET_LIGHT(index) \
    lights[probe_system.light_indices[(index / 4)][index % 4]]

#define RAY_OFFSET 0.0025
#define NUM_BOUNCES 4

layout(push_constant) uniform constants
{
    mat4 rotation;
    uint time;
} push_constants;

void SetProbeRayData(uvec2 coord, ProbeRayData ray_data)
{
    probe_rays[PROBE_RAY_DATA_INDEX(coord)] = ray_data;
}

struct RayBounceInfo
{
    vec4 throughput;
    vec4 emissive;
};

void main()
{
    const uvec2 coord = uvec2(gl_LaunchIDEXT.xy);
    
    const uint probe_index = coord.x;
    const uint ray_index = coord.y;
    
    vec3 origin = ProbeIndexToWorldPosition(probe_index);
    vec3 direction = normalize(mat3(push_constants.rotation) * SphericalFibonacci(ray_index, probe_system.num_rays_per_probe));
    
    uint flags = gl_RayFlagsOpaqueEXT;
    uint mask = 0xff;
    float tmin = RAY_OFFSET;
    float tmax = 1000.0;
    
    payload.throughput = vec4(1.0);
    payload.color = vec4(0.0);
    payload.distance = -1.0;
    
    uint ray_seed = InitRandomSeed(InitRandomSeed(coord.x, coord.y), push_constants.time % 256);

    ProbeRayData ray_data[NUM_BOUNCES];
    ray_data[0].color = vec4(0.0);
    
    RayBounceInfo bounces[NUM_BOUNCES];
    uint num_bounces = 0;

    for (int bounce_index = 0; bounce_index < NUM_BOUNCES; bounce_index++) {
        payload.distance = -1.0;

        vec4 throughput = payload.throughput;
        vec3 normal = payload.normal;
        traceRayEXT(tlas, flags, mask, 0, 0, 0, origin, tmin, direction, tmax, 0);

        bounces[bounce_index].throughput = vec4(payload.throughput.rgb * payload.throughput.a, 1.0);
        bounces[bounce_index].emissive = payload.emissive;

        ray_data[bounce_index].color = vec4(0.0);
        ray_data[bounce_index].origin = vec4(origin, 1.0);
        ray_data[bounce_index].normal = vec4(payload.normal, 0.0);
        ray_data[bounce_index].direction_depth = vec4(direction, payload.distance);

        if (payload.distance < 0.0) {
            // hit the sky, sample the environment map
            if (current_env_probe.texture_index != ~0u) {
                uint probe_texture_index = max(0, min(current_env_probe.texture_index, HYP_MAX_BOUND_REFLECTION_PROBES - 1));

                bounces[bounce_index].emissive += Texture2D(sampler_linear, env_probe_textures[probe_texture_index], EncodeOctahedralCoord(direction) * 0.5 + 0.5);
            }
            
            for (uint light_index = 0; light_index < probe_system.num_bound_lights; light_index++) {
                const Light light = HYP_GET_LIGHT(light_index);

                // Only handle directional lights here
                if (light.type != HYP_LIGHT_TYPE_DIRECTIONAL) {
                    continue;
                }

                const float cos_theta = max(dot(direction, normalize(light.position_intensity.xyz)), 0.0);
                bounces[bounce_index].emissive += UINT_TO_VEC4(light.color_encoded) * vec4(1.0) * light.position_intensity.w * cos_theta;
            }

            ++num_bounces;

            break;
        }
        
        vec3 hit_position = origin + direction * payload.distance;

        direction = normalize(RandomInHemisphere(
            vec3(RandomFloat(ray_seed), RandomFloat(ray_seed), RandomFloat(ray_seed)),
            payload.normal
        ));
        origin = hit_position + direction * RAY_OFFSET;

        ++num_bounces;
    }

    for (int bounce_index = int(num_bounces - 1); bounce_index >= 0; bounce_index--) {
        vec4 radiance = bounces[bounce_index].emissive;

        if (bounce_index != num_bounces - 1) {
            radiance += ray_data[bounce_index + 1].color * bounces[bounce_index].throughput;
        }

        // As the throughput is multiplied by the albedo, the probability of the ray getting discarded is higher
        float p = max(radiance.r, max(radiance.g, radiance.b));

        if (RandomFloat(ray_seed) > p) {
            break;
        }

        radiance /= max(p, 0.0001);
        
        ray_data[bounce_index].color = radiance;
    }

    SetProbeRayData(coord, ray_data[0]);
}
