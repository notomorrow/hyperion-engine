#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_scalar_block_layout : enable

#define HYP_NO_CUBEMAP

#include "../../include/defines.inc"
#include "../../include/noise.inc"
#include "../../include/packing.inc"

#define HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS

#include "../../include/scene.inc"
#include "../../include/shared.inc"
#include "../../include/noise.inc"

#undef HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS
#undef HYP_NO_CUBEMAP

#include "../../include/rt/payload.inc"
#include "../../include/rt/probe/probe_uniforms.inc"

HYP_DESCRIPTOR_ACCELERATION_STRUCTURE(RTRadianceDescriptorSet, TLAS) uniform accelerationStructureEXT tlas;

HYP_DESCRIPTOR_CBUFF(DDGIDescriptorSet, DDGIUniforms) uniform DDGIUniformBuffer
{
    DDGIUniforms probe_system;
};

HYP_DESCRIPTOR_SSBO(DDGIDescriptorSet, ProbeRayData, standard = std430) buffer ProbeRayDataBuffer
{
    ProbeRayData probe_rays[];
};

#include "../../include/rt/probe/shared.inc"

HYP_DESCRIPTOR_UAV(DDGIDescriptorSet, OutputIrradianceImage, format = rgba16f) uniform image2D output_irradiance;
HYP_DESCRIPTOR_UAV(DDGIDescriptorSet, OutputDepthImage, format = rg16f) uniform image2D output_depth;

HYP_DESCRIPTOR_SSBO_DYNAMIC(Scene, ScenesBuffer, size = 256) readonly buffer SceneBuffer
{
    Scene scene;
};

layout(location = 0) rayPayloadEXT RayPayload payload;

#define MAX_RECURSION 2
#define RAY_OFFSET 1.0
#define NUM_SAMPLES 1

layout(push_constant) uniform constants
{
    mat4 rotation;
    uint time;
} push_constants;

void SetProbeRayData(uvec2 coord, ProbeRayData ray_data)
{
    probe_rays[PROBE_RAY_DATA_INDEX(coord)] = ray_data;
}

void main() 
{
    const uvec2 coord = uvec2(gl_LaunchIDEXT.xy);
    
    const uint probe_index = coord.x;
    const uint ray_index = coord.y;
    
    vec3 origin = ProbeIndexToWorldPosition(probe_index);
    vec3 direction = normalize(mat3(push_constants.rotation) * SphericalFibonacci(ray_index, probe_system.num_rays_per_probe));
    
    uint flags = gl_RayFlagsOpaqueEXT;
    uint mask = 0xff;
    float tmin = 0.01;
    float tmax = 10000.0;
    
    payload.color = vec3(0.0);
    payload.distance = -1.0;
    
    traceRayEXT(tlas, flags, mask, 0, 0, 0, origin, tmin, direction, tmax, 0);

    ProbeRayData ray_data;
    ray_data.color = vec4(payload.color, 1.0);
    ray_data.origin = vec4(origin, 1.0);
    ray_data.normal = vec4(payload.normal, 0.0);
    ray_data.direction_depth = vec4(direction, payload.distance);

    //imageStore(output_irradiance, ivec2(coord), vec4(payload.color, 1.0));
    SetProbeRayData(coord, ray_data);
}
