#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_scalar_block_layout : require

#define HYP_NO_CUBEMAP

#include "../include/defines.inc"
#include "../include/noise.inc"
#include "../include/packing.inc"

#ifdef HYP_FEATURES_DYNAMIC_DESCRIPTOR_INDEXING
HYP_DESCRIPTOR_SRV(View, GBufferTextures, count = 7) uniform texture2D gbuffer_textures[NUM_GBUFFER_TEXTURES];
#else
HYP_DESCRIPTOR_SRV(View, GBufferAlbedoTexture) uniform texture2D gbuffer_albedo_texture;
HYP_DESCRIPTOR_SRV(View, GBufferNormalsTexture) uniform texture2D gbuffer_normals_texture;
HYP_DESCRIPTOR_SRV(View, GBufferMaterialTexture) uniform utexture2D gbuffer_material_texture;
HYP_DESCRIPTOR_SRV(View, GBufferVelocityTexture) uniform texture2D gbuffer_velocity_texture;
HYP_DESCRIPTOR_SRV(View, GBufferLightmapTexture) uniform texture2D gbuffer_albedo_lightmap_texture;
HYP_DESCRIPTOR_SRV(View, GBufferWSNormalsTexture) uniform texture2D gbuffer_ws_normals_texture;
HYP_DESCRIPTOR_SRV(View, GBufferTranslucentTexture) uniform texture2D gbuffer_albedo_texture_translucent;
#endif

HYP_DESCRIPTOR_SRV(View, GBufferMipChain) uniform texture2D gbuffer_mip_chain;
HYP_DESCRIPTOR_SRV(View, GBufferDepthTexture) uniform texture2D gbuffer_depth_texture;

HYP_DESCRIPTOR_SAMPLER(Global, SamplerNearest) uniform sampler sampler_nearest;
HYP_DESCRIPTOR_SAMPLER(Global, SamplerLinear) uniform sampler sampler_linear;

#define texture_sampler sampler_linear
#define HYP_SAMPLER_NEAREST sampler_nearest
#define HYP_SAMPLER_LINEAR sampler_linear

HYP_DESCRIPTOR_ACCELERATION_STRUCTURE(RTRadianceDescriptorSet, TLAS) uniform accelerationStructureEXT tlas;
HYP_DESCRIPTOR_UAV(RTRadianceDescriptorSet, OutputImage, format = rgba8) uniform image2D image;

#define HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS

#include "../include/gbuffer.inc"
#include "../include/scene.inc"
#include "../include/shared.inc"
#include "../include/packing.inc"
#include "../include/noise.inc"
#include "../include/brdf.inc"
#include "../include/env_probe.inc"

/// Blue noise
HYP_DESCRIPTOR_SSBO(Global, BlueNoiseBuffer) readonly buffer BlueNoiseBuffer
{
	ivec4 sobol_256spp_256d[256 * 256 / 4];
	ivec4 scrambling_tile[128 * 128 * 8 / 4];
	ivec4 ranking_tile[128 * 128 * 8 / 4];
};

#include "../include/BlueNoise.glsl"

#undef HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS
#undef HYP_NO_CUBEMAP

HYP_DESCRIPTOR_CBUFF(Global, WorldsBuffer) uniform WorldsBuffer
{
    WorldShaderData world_shader_data;
};

HYP_DESCRIPTOR_CBUFF_DYNAMIC(Global, CamerasBuffer) uniform CameraShaderData
{
    Camera camera;
};

HYP_DESCRIPTOR_SRV(Global, EnvProbeTextures, count = 16) uniform texture2D env_probe_textures[16];
HYP_DESCRIPTOR_SSBO(Global, EnvProbesBuffer) readonly buffer EnvProbesBuffer { EnvProbe env_probes[]; };
HYP_DESCRIPTOR_CBUFF_DYNAMIC(Global, EnvGridsBuffer) uniform EnvGridsBuffer { EnvGrid env_grid; };
HYP_DESCRIPTOR_SSBO_DYNAMIC(Global, CurrentEnvProbe) readonly buffer CurrentEnvProbe { EnvProbe current_env_probe; };

#include "../include/rt/RTRadiance.inc"
#include "../include/rt/payload.inc"

HYP_DESCRIPTOR_CBUFF(RTRadianceDescriptorSet, RTRadianceUniforms) uniform RTRadianceUniformBuffer
{
    RTRadianceUniforms rt_radiance_uniforms;
};

layout(location = 0) rayPayloadEXT RayPayload payload;
#define RAY_OFFSET 0.025
#define NUM_SAMPLES 8

#define USE_MIN_ROUGHNESS 1

void main()
{
    const ivec2 resolution = rt_radiance_uniforms.output_image_resolution;
    
    const int pixel_index = int(gl_LaunchIDEXT.x * 2) + int(world_shader_data.frame_counter & 1);

    if (pixel_index >= resolution.x * resolution.y)
    {
        // Out of bounds; return
        return;
    }

    const ivec2 storage_coord = ivec2(
        pixel_index % resolution.x,
        pixel_index / resolution.x
    );

    const vec2 uv = (vec2(storage_coord) + 0.5) / vec2(resolution);

    const mat4 view_inverse = inverse(camera.view);
    const mat4 projection_inverse = inverse(camera.projection);

    const vec3 normal = normalize(DecodeNormal(Texture2DLod(sampler_nearest, gbuffer_normals_texture, uv, 0.0)));
    const float depth = Texture2DLod(sampler_nearest, gbuffer_depth_texture, uv, 0.0).r;
    const vec3 position = ReconstructWorldSpacePositionFromDepth(projection_inverse, view_inverse, uv, depth).xyz;

    uvec2 materialData = texture(usampler2D(gbuffer_material_texture, HYP_SAMPLER_NEAREST), uv).rg;

    GBufferMaterialParams materialParams;
    GBufferUnpackMaterialParams(materialData, materialParams);

    float roughness = materialParams.roughness;

#if defined(USE_MIN_ROUGHNESS) && USE_MIN_ROUGHNESS
    if (roughness > rt_radiance_uniforms.min_roughness) {
        imageStore(image, storage_coord, vec4(0.0));
        return;
    }
#endif

    const vec3 V = normalize(camera.position.xyz - position);
    const vec3 R = normalize(reflect(-V, normal));

    const uint flags = gl_RayFlagsOpaqueEXT;
    const uint mask = 0xff;
    const float tmin = RAY_OFFSET;
    const float tmax = 1000.0;

    vec4 color = vec4(0.0);

    vec3 tangent;
    vec3 bitangent;
    ComputeOrthonormalBasis(normal, tangent, bitangent);

    vec2 rnd = vec2(
        SampleBlueNoise(int(storage_coord.x), int(storage_coord.y), int(world_shader_data.frame_counter % NUM_SAMPLES) * 2, NUM_SAMPLES * 2),
        SampleBlueNoise(int(storage_coord.x), int(storage_coord.y), int(world_shader_data.frame_counter % NUM_SAMPLES) * 2 + 1, NUM_SAMPLES * 2));

    vec3 H = ImportanceSampleGGX(rnd, normal, roughness);
    H = tangent * H.x + bitangent * H.y + normal * H.z;
    H = normalize(H);

    vec3 ray_direction = reflect(-V, H);
    vec3 origin = position + normal * RAY_OFFSET;
    
    traceRayEXT(tlas, flags, mask, 0, 0, 0, origin, tmin, ray_direction, tmax, 0);

    if (payload.distance < 0.0) {
        imageStore(image, storage_coord, vec4(0.0));
        return;
    }
    
    vec3 hit_position = origin + ray_direction * payload.distance;
    
    RayHit hit;
    hit.payload = payload;
    hit.position = hit_position;

    if (payload.distance >= tmin && payload.distance < tmax) {
        color += hit.payload.color;
    }

    color = clamp(color, vec4(0.0), vec4(1.0));

#if defined(USE_MIN_ROUGHNESS) && USE_MIN_ROUGHNESS
    // interpolate alpha based on roughness compared to minimum roughness needed for reflection
    color.a = 1.0 - (roughness / rt_radiance_uniforms.min_roughness);
#endif

    imageStore(image, storage_coord, color);
}
