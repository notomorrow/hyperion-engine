#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_scalar_block_layout : require

#define HYP_NO_CUBEMAP

#include "../include/defines.inc"
#include "../include/noise.inc"
#include "../include/packing.inc"
#include "../include/tonemap.inc"

HYP_DESCRIPTOR_SRV(Global, GBufferTextures, count = 8) uniform texture2D gbuffer_textures[8];
HYP_DESCRIPTOR_SRV(Global, GBufferMipChain) uniform texture2D gbuffer_mip_chain;
HYP_DESCRIPTOR_SRV(Global, GBufferDepthTexture) uniform texture2D gbuffer_depth_texture;

HYP_DESCRIPTOR_SAMPLER(Global, SamplerNearest) uniform sampler sampler_nearest;
HYP_DESCRIPTOR_SAMPLER(Global, SamplerLinear) uniform sampler sampler_linear;

#define texture_sampler sampler_linear
#define HYP_SAMPLER_NEAREST sampler_nearest
#define HYP_SAMPLER_LINEAR sampler_linear

HYP_DESCRIPTOR_ACCELERATION_STRUCTURE(RTRadianceDescriptorSet, TLAS) uniform accelerationStructureEXT tlas;
HYP_DESCRIPTOR_UAV(RTRadianceDescriptorSet, OutputImage, format = rgba8) uniform image2D image;

#define HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS

#include "../include/gbuffer.inc"
#include "../include/scene.inc"
#include "../include/shared.inc"
#include "../include/packing.inc"
#include "../include/noise.inc"
#include "../include/brdf.inc"

/// Blue noise
HYP_DESCRIPTOR_SSBO(Global, BlueNoiseBuffer, size = 1310720) readonly buffer BlueNoiseBuffer
{
	ivec4 sobol_256spp_256d[256 * 256 / 4];
	ivec4 scrambling_tile[128 * 128 * 8 / 4];
	ivec4 ranking_tile[128 * 128 * 8 / 4];
};

#include "../include/BlueNoise.glsl"

#undef HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS
#undef HYP_NO_CUBEMAP

HYP_DESCRIPTOR_SSBO_DYNAMIC(Scene, ScenesBuffer, size = 256) readonly buffer SceneBuffer
{
    Scene scene;
};

HYP_DESCRIPTOR_CBUFF_DYNAMIC(Scene, CamerasBuffer, size = 512) uniform CameraShaderData
{
    Camera camera;
};

#include "../include/rt/payload.inc"

layout(location = 0) rayPayloadEXT RayPayload payload;
#define RAY_OFFSET 0.25
#define NUM_SAMPLES 1

void main() 
{
    const ivec2 resolution = imageSize(image);
    
    const int pixel_index = int(gl_LaunchIDEXT.x * 2) + int(scene.frame_counter & 1);
    const ivec2 storage_coord = ivec2(
        pixel_index % resolution.x,
        pixel_index / resolution.x
    );

    const vec2 uv = (vec2(storage_coord) + 0.5) / vec2(resolution);

    const mat4 view_inverse = inverse(camera.view);
    const mat4 projection_inverse = inverse(camera.projection);

    const vec3 normal = normalize(DecodeNormal(Texture2DLod(sampler_nearest, gbuffer_normals_texture, uv, 0.0)));
    const float depth = Texture2DLod(sampler_nearest, gbuffer_depth_texture, uv, 0.0).r;
    const vec3 position = ReconstructWorldSpacePositionFromDepth(projection_inverse, view_inverse, uv, depth).xyz;
    const vec4 material_data = Texture2DLod(sampler_nearest, gbuffer_material_texture, uv, 0.0);
    const float roughness = material_data.r;
    const float perceptual_roughness = sqrt(roughness);

    const vec3 V = normalize(camera.position.xyz - position);
    const vec3 R = normalize(reflect(-V, normal));

    const uint flags = gl_RayFlagsOpaqueEXT;
    const uint mask = 0xff;
    const float tmin = 0.25;
    const float tmax = 10000.0;

    uint ray_seed = InitRandomSeed(InitRandomSeed(gl_LaunchIDEXT.x * 2, gl_LaunchIDEXT.x * 2 + 1), scene.frame_counter % 256);

    vec3 color = vec3(0.0);

    vec3 direction = normal;

    vec3 tangent;
    vec3 bitangent;
    ComputeOrthonormalBasis(normal, tangent, bitangent);

    //const float r1 = RandomFloat(ray_seed);
    //const float r2 = RandomFloat(ray_seed);

    //vec3 H = ImportanceSampleGTR2(perceptual_roughness, r1, r2);

    vec2 blue_noise_sample = vec2(
        SampleBlueNoise(storage_coord.x, storage_coord.y, 0, 0),
        SampleBlueNoise(storage_coord.x, storage_coord.y, 0, 1)
    );

    vec2 blue_noise_scaled = blue_noise_sample + float(scene.frame_counter % 16) * 1.618;
    const vec2 rnd = fmod(blue_noise_scaled, vec2(1.0));
    
    vec3 H = ImportanceSampleGGX(rnd, normal, roughness);

    H = tangent * H.x + bitangent * H.y + normal * H.z;

    direction = H;
    direction = reflect(-V, direction);
    vec3 origin = position + normal * RAY_OFFSET;
        
    traceRayEXT(tlas, flags, mask, 0, 0, 0, origin, tmin, direction, tmax, 0);

    if (payload.distance < 0.0) {
        imageStore(image, storage_coord, vec4(0.0));
        return;
    }
    
    vec3 hit_position = origin + direction * payload.distance;
    
    RayHit hit;
    hit.payload = payload;
    hit.position = hit_position;

    if (payload.distance >= tmin && payload.distance < tmax) {
        color += hit.payload.color;
    }

    color.rgb = pow(color.rgb, vec3(1.0 / 2.2));

    imageStore(image, storage_coord, vec4(color, 1.0));
}
