#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_scalar_block_layout : require

#include "../../include/defines.inc"
#include "../../include/noise.inc"
#include "../../include/packing.inc"
#include "../../include/tonemap.inc"

HYP_DESCRIPTOR_SAMPLER(Global, SamplerNearest) uniform sampler sampler_nearest;
HYP_DESCRIPTOR_SAMPLER(Global, SamplerLinear) uniform sampler sampler_linear;

#define texture_sampler sampler_linear
#define HYP_SAMPLER_NEAREST sampler_nearest
#define HYP_SAMPLER_LINEAR sampler_linear

HYP_DESCRIPTOR_ACCELERATION_STRUCTURE(RTRadianceDescriptorSet, TLAS) uniform accelerationStructureEXT tlas;

#define HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS

#include "../../include/scene.inc"
#include "../../include/shared.inc"
#include "../../include/packing.inc"
#include "../../include/noise.inc"
#include "../../include/brdf.inc"
#include "../../include/env_probe.inc"

/// Blue noise
HYP_DESCRIPTOR_SSBO(Global, BlueNoiseBuffer, size = 1310720) readonly buffer BlueNoiseBuffer
{
	ivec4 sobol_256spp_256d[256 * 256 / 4];
	ivec4 scrambling_tile[128 * 128 * 8 / 4];
	ivec4 ranking_tile[128 * 128 * 8 / 4];
};

#include "../../include/BlueNoise.glsl"

#undef HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS

HYP_DESCRIPTOR_SSBO(RTRadianceDescriptorSet, LightsBuffer) readonly buffer LightsBuffer
{
    Light lights[];
};

HYP_DESCRIPTOR_SSBO_DYNAMIC(Scene, ScenesBuffer, size = 256) readonly buffer SceneBuffer
{
    Scene scene;
};

HYP_DESCRIPTOR_SRV(Scene, EnvProbeTextures, count = 16) uniform textureCube env_probe_textures[16];
HYP_DESCRIPTOR_SSBO(Scene, EnvProbesBuffer, size = 131072) readonly buffer EnvProbesBuffer { EnvProbe env_probes[HYP_MAX_ENV_PROBES]; };
HYP_DESCRIPTOR_CBUFF_DYNAMIC(Scene, EnvGridsBuffer, size = 4352) uniform EnvGridsBuffer { EnvGrid env_grid; };
HYP_DESCRIPTOR_SSBO(Scene, SHGridBuffer, size = 147456) readonly buffer SHGridBuffer { vec4 sh_grid_buffer[SH_GRID_BUFFER_SIZE]; };
HYP_DESCRIPTOR_SSBO_DYNAMIC(Scene, CurrentEnvProbe, size = 512) readonly buffer CurrentEnvProbe
{
    EnvProbe current_env_probe;
};

#define PATHTRACER
#define LIGHTMAPPER
#include "../../include/rt/RTRadiance.inc"
#include "../../include/rt/payload.inc"

layout(location = 0) rayPayloadEXT RayPayload payload;

struct LightmapHit
{
    vec4 color;
};

HYP_DESCRIPTOR_SSBO(RTRadianceDescriptorSet, HitsBuffer, size = 131072) buffer HitsBuffer
{
    LightmapHit hits[8192];
};

struct Ray
{
    vec4 origin;
    vec4 direction;
};

HYP_DESCRIPTOR_SSBO(RTRadianceDescriptorSet, RaysBuffer) readonly buffer RaysBuffer
{
    Ray rays[];
};

HYP_DESCRIPTOR_CBUFF(RTRadianceDescriptorSet, RTRadianceUniforms) uniform RTRadianceUniformBuffer
{
    RTRadianceUniforms rt_radiance_uniforms;
};

#define RAY_OFFSET 0.2
#define NUM_SAMPLES 8
#define NUM_BOUNCES 2

// uncomment to see the actual object colors
// #define DEBUG_TEST

void main() 
{
    const uint ray_index = gl_LaunchIDEXT.x;
    const Ray ray = rays[ray_index];

    const uint flags = gl_RayFlagsOpaqueEXT;
    const uint mask = 0xff;
    const float tmin = 0.1;
    const float tmax = 1000.0;

    const vec3 normal = ray.direction.xyz;

    vec4 radiance = vec4(0.0, 0.0, 0.0, 0.0);

    uint ray_seed = InitRandomSeed(((rt_radiance_uniforms.ray_offset + ray_index) * 2), ((rt_radiance_uniforms.ray_offset + ray_index) * 2) + 1);

    for (uint sample_index = 0; sample_index < NUM_SAMPLES; sample_index++) {

        // vec2 blue_noise_sample = vec2(
        //     SampleBlueNoise(int(((rt_radiance_uniforms.ray_offset + ray_index) * 2) * NUM_SAMPLES + sample_index * 2), int(((rt_radiance_uniforms.ray_offset + ray_index) * 2) * NUM_SAMPLES + sample_index * 2 + 1), 0, 0),
        //     SampleBlueNoise(int(((rt_radiance_uniforms.ray_offset + ray_index) * 2) * NUM_SAMPLES + sample_index * 2), int(((rt_radiance_uniforms.ray_offset + ray_index) * 2) * NUM_SAMPLES + sample_index * 2 + 1), 0, 1)
        // );

        // vec2 blue_noise_scaled = blue_noise_sample + float(scene.frame_counter % 256) * 1.618;
        // vec2 rnd = fmod(blue_noise_scaled, vec2(1.0));

        vec2 rnd = vec2(RandomFloat(ray_seed), RandomFloat(ray_seed));

        // vec3 tangent;
        // vec3 bitangent;
        // ComputeOrthonormalBasis(normal, tangent, bitangent);

        // vec3 H = ImportanceSampleGGX(rnd, normal, 1.0);
        // H = tangent * H.x + bitangent * H.y + normal * H.z;

        // vec3 direction = H;
        // vec3 origin = ray.origin.xyz + normal * RAY_OFFSET;

        vec3 H;

#ifdef DEBUG_TEST
        vec3 direction = -ray.direction.xyz;
#else
        vec3 direction = normalize(RandomInHemisphere(
            vec3(RandomFloat(ray_seed), RandomFloat(ray_seed), RandomFloat(ray_seed)),
            ray.direction.xyz
        ));

        // vec3 direction = ray.direction.xyz;
#endif

        vec3 origin = ray.origin.xyz + ray.direction.xyz * RAY_OFFSET;

        payload.throughput = vec4(1.0);
        payload.emissive = vec4(0.0);
        payload.triangle_index = ~0u;
        payload.entity_index = ~0u;
        payload.beta = vec4(1.0);

        for (int bounce_index = 0; bounce_index < NUM_BOUNCES; bounce_index++) {
            vec4 throughput = payload.throughput;
            traceRayEXT(tlas, flags, mask, 0, 0, 0, origin, tmin, direction, tmax, 0);

            if (payload.distance < 0.0) {
                // hit the sky, sample the environment map
                if (current_env_probe.texture_index != ~0u) {
                    uint probe_texture_index = max(0, min(current_env_probe.texture_index, HYP_MAX_BOUND_REFLECTION_PROBES - 1));

                    vec4 emissive = TextureCube(sampler_linear, env_probe_textures[probe_texture_index], direction);

                    for (uint light_index = 0; light_index < rt_radiance_uniforms.num_bound_lights; light_index++) {
                        const Light light = HYP_GET_LIGHT(light_index);

                        if (light.type != 0) {
                            continue;
                        }

                        const float cos_theta = max(dot(direction, light.position_intensity.xyz), 0.0);
                        emissive += UINT_TO_VEC4(light.color_encoded) * light.position_intensity.w * cos_theta;
                        break;
                    }

                    radiance += emissive * throughput;
                }

                break;
            }

            radiance += payload.emissive * throughput;
            throughput = payload.throughput;
            
            // As the throughput is multiplied by the albedo, the probability of the ray getting discarded is higher
            float p = max(throughput.r, max(throughput.g, max(throughput.b, throughput.a)));

            if (RandomFloat(ray_seed) > p) {
                break;
            }

            payload.throughput /= max(p, 0.0001);
        
            vec3 tangent;
            vec3 bitangent;
            ComputeOrthonormalBasis(payload.normal, tangent, bitangent);

            H = ImportanceSampleGGX(rnd, payload.normal, payload.roughness);
            H = tangent * H.x + bitangent * H.y + payload.normal * H.z;
                
            direction = reflect(direction, H);

            vec3 hit_position = origin + direction * payload.distance;
            origin = hit_position + payload.normal * RAY_OFFSET;
        }
    }

    vec4 color = radiance / float(NUM_SAMPLES);
    // color.rgb = pow(color.rgb, vec3(1.0 / 2.2));

    hits[ray_index].color = color;
}
