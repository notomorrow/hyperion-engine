
#version 450

#extension GL_GOOGLE_include_directive : require

#define WORKGROUP_SIZE 8

layout(local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE) in;

#define HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS

#define HYP_SAMPLER_NEAREST sampler_nearest
#define HYP_SAMPLER_LINEAR sampler_linear

#include "../include/defines.inc"
#include "../include/shared.inc"
#include "../include/noise.inc"
#include "../include/packing.inc"
#include "../include/env_probe.inc"
#include "../include/scene.inc"
#include "../include/Octahedron.glsl"
#include "../include/brdf.inc"

HYP_DESCRIPTOR_CBUFF(Global, SphereSamplesBuffer) uniform SphereSamplesBuffer
{
    vec4 sphere_samples[4096];
};

HYP_DESCRIPTOR_SRV(LightFieldProbeDescriptorSet, InColorImage) uniform textureCube color_texture;
HYP_DESCRIPTOR_SRV(LightFieldProbeDescriptorSet, InNormalsImage) uniform textureCube normals_texture;
HYP_DESCRIPTOR_SRV(LightFieldProbeDescriptorSet, InDepthImage) uniform textureCube depth_texture;

HYP_DESCRIPTOR_SAMPLER(LightFieldProbeDescriptorSet, SamplerLinear) uniform sampler sampler_linear;
HYP_DESCRIPTOR_SAMPLER(LightFieldProbeDescriptorSet, SamplerNearest) uniform sampler sampler_nearest;

HYP_DESCRIPTOR_UAV(LightFieldProbeDescriptorSet, OutColorImage, format = rgba16f) uniform image2D out_color_image;
HYP_DESCRIPTOR_UAV(LightFieldProbeDescriptorSet, OutDepthImage, format = rg16f) uniform image2D out_depth_image;

HYP_DESCRIPTOR_CBUFF(LightFieldProbeDescriptorSet, UniformBuffer) uniform UniformBuffer
{
    uvec4 image_dimensions;
    uvec4 probe_grid_position;
    uvec4 dimension_per_probe;
    uvec4 probe_offset_coord;

    uint  num_bound_lights;
    uint  _pad0;
    uint  _pad1;
    uint  _pad2;

    uvec4 light_indices[4];
};

HYP_DESCRIPTOR_SRV(Scene, EnvProbeTextures, count = 16) uniform textureCube env_probe_textures[16];
HYP_DESCRIPTOR_SSBO(Scene, EnvProbesBuffer) readonly buffer EnvProbesBuffer { EnvProbe env_probes[]; };
HYP_DESCRIPTOR_SSBO(Scene, SHGridBuffer) readonly buffer SHGridBuffer { vec4 sh_grid_buffer[SH_GRID_BUFFER_SIZE]; };
HYP_DESCRIPTOR_SSBO_DYNAMIC(Scene, CurrentEnvProbe) readonly buffer CurrentEnvProbe { EnvProbe current_env_probe; };

HYP_DESCRIPTOR_SSBO(Scene, LightsBuffer) readonly buffer LightsBuffer { Light lights[]; };

HYP_DESCRIPTOR_SSBO(Scene, ShadowMapsBuffer) readonly buffer ShadowMapsBuffer { ShadowMap shadow_map_data[16]; };
HYP_DESCRIPTOR_SRV(Scene, ShadowMapTextures, count = 16) uniform texture2D shadow_maps[16];
HYP_DESCRIPTOR_SRV(Scene, PointLightShadowMapTextures, count = 16) uniform textureCube point_shadow_maps[16];

#include "../include/shadows.inc"

vec2 NormalizeOctahedralCoord(uvec2 local_coord)
{
    return (vec2(local_coord) + vec2(0.5)) * (vec2(2.0) / vec2(dimension_per_probe)) - vec2(1.0);
}

vec2 ConvoleProbe(uvec2 local_coord)
{
    const int num_samples = 128;
    const float lobe_size = 0.9;

    const vec2 oct_coord = NormalizeOctahedralCoord(local_coord);
    const vec3 dir = DecodeOctahedralCoord(oct_coord);

    vec2 sum_distance = vec2(0.0);

    for (int i = 0; i < num_samples; i++) {
        vec3 offset = sphere_samples[i % 4096].xyz;
        vec3 sample_dir = normalize(dir + vec3(lobe_size) * offset);

        vec2 dist_dist2 = TextureCube(sampler_linear, depth_texture, sample_dir).rg;
        sum_distance += dist_dist2;
    }

    return sum_distance / float(num_samples);
}

void main(void)
{
    if (any(greaterThanEqual(gl_GlobalInvocationID.xy, dimension_per_probe.xy))) {
        return;
    }

    const uvec2 local_coord = gl_GlobalInvocationID.xy;
    
    const uvec2 coord = probe_offset_coord.xy + local_coord;

    vec2 dist_dist2 = ConvoleProbe(local_coord);

    float dist = dist_dist2.r;
    float remapped = dist / (dist + 1.0);
    vec3 color = vec3(pow(abs(remapped), 15.0));

    imageStore(out_depth_image, ivec2(coord), vec4(color, 1.0));
}