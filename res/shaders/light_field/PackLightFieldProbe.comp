
#version 450

#extension GL_GOOGLE_include_directive : require

#include "Shared.glsl"

#define LOWRES_DITHER (PROBE_SIDE_LENGTH / PROBE_SIDE_LENGTH_LOWRES)

#define WORKGROUP_SIZE 32
#define PIXELS_PER_WORKGROUP (PROBE_SIDE_LENGTH / WORKGROUP_SIZE)

layout(local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE) in;

#include "../include/defines.inc"
#include "../include/shared.inc"
#include "../include/tonemap.inc"
#include "../include/brdf.inc"
#include "../include/noise.inc"

#define HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS
#include "../include/env_probe.inc"

layout(set = 0, binding = 0) uniform textureCube color_texture;
layout(set = 0, binding = 1) uniform textureCube normals_texture;
layout(set = 0, binding = 2) uniform textureCube depth_texture;

layout(set = 0, binding = 3) uniform sampler sampler_linear;
layout(set = 0, binding = 4) uniform sampler sampler_nearest;

// #define USE_TEXTURE_ARRAY

#ifdef USE_TEXTURE_ARRAY
layout(set = 0, binding = 5, rgba16f) uniform writeonly image2DArray color_image;
layout(set = 0, binding = 6, rg16f) uniform writeonly image2DArray normals_image;
layout(set = 0, binding = 7, rg16f) uniform writeonly image2DArray depth_image;
layout(set = 0, binding = 8, rgba8) uniform writeonly image2DArray irradiance_image;
layout(set = 0, binding = 9, r32f) uniform writeonly image2DArray depth_image_lowres;
#else
layout(set = 0, binding = 5, rgba16f) uniform writeonly image2D color_image;
layout(set = 0, binding = 6, rg16f) uniform writeonly image2D normals_image;
layout(set = 0, binding = 7, rg16f) uniform writeonly image2D depth_image;
layout(set = 0, binding = 8, rgba8) uniform writeonly image2D irradiance_image;
layout(set = 0, binding = 9, r32f) uniform writeonly image2D depth_image_lowres;
#endif

layout(push_constant) uniform PushConstant
{
    uvec4 probe_grid_position;
    uvec4 cubemap_dimensions;
    uvec4 probe_offset_coord;
    uvec4 probe_offset_coord_lowres;
    uvec4 grid_dimensions;
};

vec3 MapXYSToDirection(uint face_index, vec2 uv) {
    vec3 dir = vec3(0.0);

    float u = uv.x;
    float v = -uv.y;

    // +x, -x, +y, -y, +z, -z
    switch (face_index) {
    case 0:
        dir = normalize(vec3(1.0, v, -u));
        break;
    case 1:
        dir = normalize(vec3(-1.0, v, u));
        break;
    case 2:
        dir = normalize(vec3(u, 1.0, -v));
        break;
    case 3:
        dir = normalize(vec3(u, -1.0, v));
        break;
    case 4:
        dir = normalize(vec3(u, v, 1.0));
        break;
    case 5:
        dir = normalize(vec3(-u, v, -1.0));
        break;
    }

    return dir;
}

vec2 NormalizeOctahedralCoord(uvec2 coord)
{
    ivec2 oct_frag_coord = ivec2((int(coord.x) - 2) % PROBE_SIDE_LENGTH_BORDER, (int(coord.y) - 2) % PROBE_SIDE_LENGTH_BORDER);
    
    return (vec2(oct_frag_coord) + vec2(0.5)) * (2.0 / float(PROBE_SIDE_LENGTH)) - vec2(1.0);
}

struct ConvolutionResult
{
    vec3 color;
    vec2 dist_dist2;
};

ConvolutionResult ConvoleProbe(uint probe_index, vec3 dir)
{
    const int num_samples = 256;
    const float lobe_size = 0.96;

    vec3 sum_radiance = vec3(0.0);
    float sum_distance = 0.0;
    float sum_square_distance = 0.0;

    uint seed = probe_index * 0x1f1f1f1f;

    for (int i = 0; i < num_samples; i++) {
        // vec2 hammersley = Hammersley(i, num_samples);

        vec3 offset = RandomInSphere(vec3(RandomFloat(seed), RandomFloat(seed), RandomFloat(seed)));
        vec3 sample_dir = normalize(dir + vec3(lobe_size) * offset);

        vec3 radiance = TextureCube(sampler_linear, color_texture, sample_dir).rgb;
        sum_radiance += radiance;

        // float phi = hammersley.y * 2.0 * HYP_FMATH_PI;
        // float cos_theta = hammersley.x * 2.0 - 1.0;
        // float sin_theta = sqrt(1.0 - cos_theta * cos_theta);

        // vec3 dir = vec3(
        //     cos(phi) * sin_theta,
        //     sin(phi) * sin_theta,
        //     cos_theta
        // );

        // vec3 dir = CosWeightedRandomHemisphereDirectionHammersley(i, num_samples, d);

        // if (dot(d, dir) > 0.0) {
        //     float cosine_weight = max(dot(d, dir), 0.0);
        //     float cosine_weight2 = cosine_weight * cosine_weight;

        //     vec3 radiance = TextureCube(sampler_linear, color_texture, dir).rgb;
        //     sum_radiance += radiance * cosine_weight;

        //     float dist = TextureCube(sampler_linear, depth_texture, dir).r;
        //     float dist2 = dist * dist;

        //     sum_distance += dist2 * cosine_weight2;
        //     sum_square_distance += dist2 * cosine_weight2 * cosine_weight2;
        // }
    }

    ConvolutionResult result;
    result.color = sum_radiance / float(num_samples);
    // result.dist_dist2 = vec2(sum_distance, sum_square_distance) / float(num_samples * 0.5);

    return result;
}

void DoPixel(uint probe_index, uvec2 coord)
{
    uvec2 irradiance_downsample = max(uvec2(1), uvec2(PROBE_SIDE_LENGTH / PROBE_SIDE_LENGTH_IRRADIANCE));

#ifdef USE_TEXTURE_ARRAY
    uvec2 radiance_coord = coord;
    uvec2 irradiance_coord = coord / irradiance_downsample;
#else
    uvec2 radiance_coord = probe_offset_coord.xy + coord + 1;
    uvec2 irradiance_coord = probe_offset_coord.zw + (coord / irradiance_downsample) + 1;
#endif

    const vec3 dir = normalize(DecodeOctahedralCoord(NormalizeOctahedralCoord(coord)));

    const vec4 color_sample = TextureCube(sampler_nearest, color_texture, dir);
    const vec2 normals_sample = TextureCube(sampler_nearest, normals_texture, dir).rg;
    const vec2 depth_sample = TextureCube(sampler_nearest, depth_texture, dir).rg;

#ifdef USE_TEXTURE_ARRAY
    ivec3 storage_coord_radiance = ivec3(radiance_coord, int(probe_index));
    ivec3 storage_coord_irradiance = ivec3(irradiance_coord, int(probe_index));
#else
    ivec2 storage_coord_radiance = ivec2(radiance_coord);
    ivec2 storage_coord_irradiance = ivec2(irradiance_coord);
#endif

    imageStore(
        color_image,
        storage_coord_radiance,
        color_sample
    );

    imageStore(
        normals_image,
        storage_coord_radiance,
        vec4(normals_sample, 0.0, 0.0)
    );

    imageStore(
        depth_image,
        storage_coord_radiance,
        vec4(depth_sample, 0.0, 0.0)
    );


    if (mod(coord, irradiance_downsample) == uvec2(0)) {
        ConvolutionResult irradiance_result = ConvoleProbe(probe_index, dir);

        imageStore(
            irradiance_image,
            storage_coord_irradiance,
            vec4(irradiance_result.color, 1.0)
        );
    }

    if (mod(coord, uvec2(LOWRES_DITHER)) == uvec2(0)) {
        uvec2 lowres_local_coord = coord / uvec2(LOWRES_DITHER);
        uvec2 lowres_coord = uvec2(probe_offset_coord_lowres.xy + lowres_local_coord + 1);

        #ifdef USE_TEXTURE_ARRAY
            ivec3 storage_coord_lowres = ivec3(lowres_coord, int(probe_index));
        #else
            ivec2 storage_coord_lowres = ivec2(lowres_coord);
        #endif

        imageStore(
            depth_image_lowres,
            storage_coord_lowres,
            vec4(depth_sample.r, 0.0, 0.0, 1.0)
        );
    }
}

void main(void)
{
    const uint probe_index = probe_grid_position.w;

    DoPixel(probe_index, gl_GlobalInvocationID.xy);
}
