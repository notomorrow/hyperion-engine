
#version 450

#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 256) in;

#define HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS

#define HYP_SAMPLER_NEAREST sampler_nearest
#define HYP_SAMPLER_LINEAR sampler_linear

#include "../include/defines.inc"
#include "../include/shared.inc"
#include "../include/noise.inc"
#include "../include/packing.inc"
#include "../include/env_probe.inc"
#include "../include/scene.inc"
#include "../include/Octahedron.glsl"
#include "../include/brdf.inc"

HYP_DESCRIPTOR_SRV(LightFieldProbeDescriptorSet, InColorImage) uniform textureCube color_texture;
HYP_DESCRIPTOR_SRV(LightFieldProbeDescriptorSet, InNormalsImage) uniform textureCube normals_texture;
HYP_DESCRIPTOR_SRV(LightFieldProbeDescriptorSet, InDepthImage) uniform textureCube depth_texture;

HYP_DESCRIPTOR_SAMPLER(LightFieldProbeDescriptorSet, SamplerLinear) uniform sampler sampler_linear;
HYP_DESCRIPTOR_SAMPLER(LightFieldProbeDescriptorSet, SamplerNearest) uniform sampler sampler_nearest;

HYP_DESCRIPTOR_UAV(LightFieldProbeDescriptorSet, OutColorImage, format = rgba16f) uniform image2D out_color_image;
HYP_DESCRIPTOR_UAV(LightFieldProbeDescriptorSet, OutDepthImage, format = rg16f) uniform image2D out_depth_image;

HYP_DESCRIPTOR_CBUFF(LightFieldProbeDescriptorSet, UniformBuffer) uniform UniformBuffer
{
    uvec4 image_dimensions;
    uvec4 probe_grid_position;
    uvec4 dimension_per_probe;
    uvec4 probe_offset_coord;

    uint  num_bound_lights;
    uint  _pad0;
    uint  _pad1;
    uint  _pad2;

    uvec4 light_indices[4];
};

void CopyPixel(ivec2 src_coord, ivec2 dst_coord)
{
    ivec2 offset_coord = ivec2(probe_offset_coord.xy);

    dst_coord += offset_coord;
    src_coord += offset_coord;

    imageStore(out_color_image, dst_coord.xy, imageLoad(out_color_image, src_coord.xy));
    imageStore(out_depth_image, dst_coord.xy, imageLoad(out_depth_image, src_coord.xy));
}

void main(void)
{
    uint side = gl_GlobalInvocationID.x / dimension_per_probe.x;
    uint pixel_index = gl_GlobalInvocationID.x % dimension_per_probe.x;

    switch (side) {
    case 0:
    {
        CopyPixel(ivec2(pixel_index, 0), ivec2(pixel_index, -1));

        if (pixel_index == 0) {
            CopyPixel(ivec2(0, 0), ivec2(-1, -1));
        }

        break;
    }
    case 1:
    {
        CopyPixel(ivec2(0, pixel_index), ivec2(-1, pixel_index));

        if (pixel_index == 0) {
            CopyPixel(ivec2(0, dimension_per_probe.y - 1), ivec2(-1, dimension_per_probe.y));
        }

        break;
    }
    case 2:
    {
        CopyPixel(ivec2(pixel_index, dimension_per_probe.y - 1), ivec2(pixel_index, dimension_per_probe.y));

        if (pixel_index == 0) {
            CopyPixel(ivec2(dimension_per_probe.x - 1, dimension_per_probe.y - 1), ivec2(dimension_per_probe.x, dimension_per_probe.y));
        }

        break;
    }
    case 3:
    {
        CopyPixel(ivec2(dimension_per_probe.x - 1, pixel_index), ivec2(dimension_per_probe.x, pixel_index));

        if (pixel_index == 0) {
            CopyPixel(ivec2(dimension_per_probe.x - 1, 0), ivec2(dimension_per_probe.x, -1));
        }

        break;
    }
    default:
        return;
    }

    // if (any(lessThan(dst_coord, ivec2(0))) || any(greaterThanEqual(dst_coord, ivec2(image_dimensions.xy)))) {
    //     return;
    // }
}