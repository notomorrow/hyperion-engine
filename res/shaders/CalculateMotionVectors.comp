#version 450

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_nonuniform_qualifier : require

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#include "include/defines.inc"
#include "include/shared.inc"

#define HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS
#include "include/scene.inc"
#undef HYP_DO_NOT_DEFINE_DESCRIPTOR_SETS

layout(set = 0, binding = 0) uniform texture2D depth_texture;
layout(set = 0, binding = 1) uniform texture2D previous_depth_texture;
layout(set = 0, binding = 2) uniform sampler sampler_nearest;
layout(std140, set = 0, binding = 3, row_major) uniform MotionVectorUniforms {
    mat4 view_matrix;
    mat4 projection_matrix;
    mat4 inverse_view_matrix;
    mat4 inverse_projection_matrix;
    mat4 last_view_matrix;
    mat4 last_projection_matrix;
    mat4 last_inverse_view_matrix;
    mat4 last_inverse_projection_matrix;
    uvec2 dimensions;
};
layout(set = 0, binding = 4, rg16f) uniform image2D output_image;

void main()
{
    const uvec2 pixel_coord = gl_GlobalInvocationID.xy;
    
    if (any(greaterThanEqual(pixel_coord, dimensions))) {
        return;
    }

    const vec2 uv = vec2(pixel_coord + vec2(0.5)) / vec2(dimensions);

    // GPU Gems 3, Chapter 27

    float current_depth = Texture2D(sampler_nearest, depth_texture, uv).r;
    // vec4 current_position_view_space = ReconstructViewSpacePositionFromDepth(inverse_projection_matrix, uv, current_depth);
    vec4 current_position_world_space = ReconstructWorldSpacePositionFromDepth(inverse_projection_matrix, inverse_view_matrix, uv, current_depth);
    current_position_world_space /= current_position_world_space.w;

    // vec4 current_position_ndc_space = vec4(uv.x * 2.0 - 1.0, uv.y * 2.0 - 1.0, current_depth, 1.0);
    // vec4 current_position_world_space = inverse_projection_matrix * inverse_view_matrix * current_position_ndc_space;
    // current_position_world_space /= current_position_world_space.w;

    vec4 current_position_view = view_matrix * current_position_world_space;
    current_position_view /= current_position_view.w;

    vec4 previous_position_view = (last_view_matrix) * current_position_world_space;
    previous_position_view /= previous_position_view.w;

    // vec2 delta_ndc = (current_position_ndc.xy * 0.5 + 0.5) - (previous_position_ndc.xy * 0.5 + 0.5);//(current_position_ndc_space.xy - previous_position_ndc.xy) * 0.5;
    vec3 delta_view = (current_position_view.xyz) - (previous_position_view.xyz);//(current_position_ndc_space.xy - previous_position_ndc.xy) * 0.5;

    imageStore(output_image, clamp(ivec2(pixel_coord), ivec2(0.0), ivec2(dimensions - 1)), vec4(previous_position_view.xyz, 1.0));
}